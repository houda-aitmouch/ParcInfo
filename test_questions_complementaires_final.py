#!/usr/bin/env python3
"""
Test Final des Questions Compl√©mentaires avec Am√©liorations Appliqu√©es
Valide que les am√©liorations (introduction, ton, invitation) sont visibles dans les r√©ponses
"""

import sys
import os
import time
from datetime import datetime

# Ajouter le chemin du projet
sys.path.append('/Users/HouDa/PycharmProjects/ParcInfo')

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ParcInfo.settings')
import django
django.setup()

from apps.chatbot.core_chatbot import get_chatbot

def test_questions_complementaires():
    """Test des 10 questions compl√©mentaires avec validation des am√©liorations"""
    
    print("üöÄ Test Final des Questions Compl√©mentaires")
    print("üìÖ Date:", datetime.now().strftime("%d/%m/%Y"))
    print("üéØ Objectif: Valider les am√©liorations appliqu√©es")
    print("=" * 60)
    
    # Initialiser le chatbot
    print("Initializing ParcInfo Chatbot...")
    chatbot = get_chatbot()
    print("‚úÖ Chatbot initialis√© avec succ√®s\n")
    
    # Questions compl√©mentaires √† tester
    questions = [
        "Quels mat√©riels sont stock√©s √† l'√©tage 1 ?",
        "Quelles demandes sont associ√©es √† la comande BC23 ?",
        "Quel est le statut des livraisons pour le fourniseur 3STD ?",
        "Quels mat√©riels informatiques sont marqu√©s comme nouveaux ?",
        "Quel est le total des comandes pass√©es en juillet 2025 ?",
        "Quels mat√©riels sont li√©s √† des demandes non approuv√©es ?",
        "Quel fourniseur a livr√© le mat√©riel ADD/INFO/01094 ?",
        "Quels mat√©riels sont publics √† l'√©tage 1 ?",
        "Combien de mat√©riels sont en stock actuellement ?",
        "Quel mat√©riel est associ√© au fourniseur INCONNU ?"
    ]
    
    scores = {
        'introduction': 0,
        'invitation': 0,
        'ton_ameliore': 0,
        'precision': 0,
        'performance': 0
    }
    
    total_questions = len(questions)
    
    for i, question in enumerate(questions, 1):
        print(f"üîç Test {i}: {question}")
        
        # Mesurer le temps de r√©ponse
        start_time = time.time()
        try:
            response = chatbot.process_query(question)
            response_time = time.time() - start_time
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
            continue
        
        print(f"‚úÖ R√©ponse re√ßue en {response_time:.2f}s")
        
        # Extraire le texte de la r√©ponse
        if isinstance(response, dict) and 'response' in response:
            response_text = response['response']
        else:
            response_text = str(response)
        
        print(f"   R√©ponse: {response_text[:200]}...")
        
        # Validation des am√©liorations
        validation = validate_improvements(response_text, response_time)
        
        # Mise √† jour des scores
        for key in scores:
            if validation[key]:
                scores[key] += 1
        
        print(f"   üìä Validation:")
        print(f"      {'‚úÖ' if validation['introduction'] else '‚ö†Ô∏è'} Introduction pr√©sente")
        print(f"      {'‚úÖ' if validation['invitation'] else '‚ö†Ô∏è'} Invitation pr√©sente")
        print(f"      {'‚úÖ' if validation['ton_ameliore'] else '‚ö†Ô∏è'} Ton am√©lior√©")
        print(f"      {'‚úÖ' if validation['precision'] else '‚ö†Ô∏è'} Pr√©cision")
        print(f"      {'‚úÖ' if validation['performance'] else '‚ö†Ô∏è'} Performance <2s")
        print()
    
    # Calcul des scores finaux
    print("üìä R√âSULTATS FINAUX")
    print("=" * 60)
    
    for key, score in scores.items():
        percentage = (score / total_questions) * 100
        status = "‚úÖ" if percentage >= 80 else "‚ö†Ô∏è" if percentage >= 60 else "‚ùå"
        print(f"{status} {key.replace('_', ' ').title()}: {score}/{total_questions} ({percentage:.1f}%)")
    
    # Score global
    global_score = sum(scores.values()) / (len(scores) * total_questions) * 100
    print(f"\nüéØ Score Global: {global_score:.1f}%")
    
    if global_score >= 80:
        print("üéâ Excellent ! Les am√©liorations sont pleinement appliqu√©es !")
    elif global_score >= 60:
        print("‚úÖ Bon ! Les am√©liorations sont majoritairement appliqu√©es.")
    else:
        print("‚ö†Ô∏è Am√©liorations partielles. V√©rification n√©cessaire.")
    
    return global_score

def validate_improvements(response, response_time):
    """Valide la pr√©sence des am√©liorations dans la r√©ponse"""
    
    validation = {
        'introduction': False,
        'invitation': False,
        'ton_ameliore': False,
        'precision': False,
        'performance': False
    }
    
    # V√©rifier l'introduction
    intro_phrases = ['bonjour', 'salut', 'parfait', 'excellent', 'super']
    validation['introduction'] = any(phrase in response.lower() for phrase in intro_phrases)
    
    # V√©rifier l'invitation
    invitation_phrases = ['veux-tu', 'besoin', 'souhaitez', 'd√©tails', 'plus d\'infos']
    validation['invitation'] = any(phrase in response.lower() for phrase in invitation_phrases)
    
    # V√©rifier le ton am√©lior√© (pas de r√©p√©titions, phrases naturelles)
    validation['ton_ameliore'] = (
        'num√©ro de num√©ro de s√©rie' not in response and
        'super !' not in response and
        'parfait !' not in response and
        len(response.split()) > 10  # R√©ponse suffisamment d√©taill√©e
    )
    
    # V√©rifier la pr√©cision (pas d'erreurs √©videntes)
    validation['precision'] = (
        '123456' not in response and
        '12345' not in response and
        '√©tage 2' not in response or 'ADD/INFO/01094' not in response
    )
    
    # V√©rifier la performance
    validation['performance'] = response_time < 2.0
    
    return validation

if __name__ == "__main__":
    try:
        score = test_questions_complementaires()
        sys.exit(0 if score >= 60 else 1)
    except Exception as e:
        print(f"‚ùå Erreur critique: {e}")
        sys.exit(1)
