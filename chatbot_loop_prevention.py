#!/usr/bin/env python3
"""
Script pour prÃ©venir les boucles infinies dans le chatbot ParcInfo
"""

import os
import sys
import time
import logging
import json
from pathlib import Path
from typing import Dict, List, Optional
from collections import deque

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ChatbotLoopPrevention:
    """Classe pour prÃ©venir les boucles infinies dans le chatbot"""
    
    def __init__(self, max_history: int = 10, max_repetitions: int = 3):
        self.max_history = max_history
        self.max_repetitions = max_repetitions
        self.conversation_history = deque(maxlen=max_history)
        self.response_cache = {}
        self.loop_detection_file = Path("/app/.cache/chatbot_loop_detection.json")
        self.loop_detection_file.parent.mkdir(parents=True, exist_ok=True)
        
    def _load_loop_detection_data(self) -> Dict:
        """Charge les donnÃ©es de dÃ©tection de boucles"""
        if self.loop_detection_file.exists():
            try:
                with open(self.loop_detection_file, 'r') as f:
                    return json.load(f)
            except Exception as e:
                logger.warning(f"Impossible de charger les donnÃ©es de dÃ©tection de boucles: {e}")
        return {"loops_detected": 0, "last_reset": time.time()}
    
    def _save_loop_detection_data(self, data: Dict):
        """Sauvegarde les donnÃ©es de dÃ©tection de boucles"""
        try:
            with open(self.loop_detection_file, 'w') as f:
                json.dump(data, f, indent=2)
        except Exception as e:
            logger.warning(f"Impossible de sauvegarder les donnÃ©es de dÃ©tection de boucles: {e}")
    
    def detect_loop(self, user_input: str, bot_response: str) -> bool:
        """DÃ©tecte si une boucle infinie est en cours"""
        # Ajouter Ã  l'historique
        self.conversation_history.append({
            "user_input": user_input.lower().strip(),
            "bot_response": bot_response.lower().strip(),
            "timestamp": time.time()
        })
        
        # VÃ©rifier les rÃ©pÃ©titions
        if len(self.conversation_history) >= self.max_repetitions:
            recent_responses = [item["bot_response"] for item in list(self.conversation_history)[-self.max_repetitions:]]
            
            # VÃ©rifier si la mÃªme rÃ©ponse se rÃ©pÃ¨te
            if len(set(recent_responses)) == 1:
                logger.warning(f"ğŸ”„ Boucle infinie dÃ©tectÃ©e: rÃ©ponse rÃ©pÃ©tÃ©e '{recent_responses[0]}'")
                return True
            
            # VÃ©rifier si l'utilisateur pose la mÃªme question
            recent_inputs = [item["user_input"] for item in list(self.conversation_history)[-self.max_repetitions:]]
            if len(set(recent_inputs)) == 1:
                logger.warning(f"ğŸ”„ Boucle infinie dÃ©tectÃ©e: question rÃ©pÃ©tÃ©e '{recent_inputs[0]}'")
                return True
        
        return False
    
    def get_loop_breaking_response(self) -> str:
        """Retourne une rÃ©ponse pour briser la boucle"""
        responses = [
            "Je remarque que nous tournons en rond. Laissez-moi vous aider diffÃ©remment. Pouvez-vous reformuler votre question ?",
            "Il semble que nous ayons un problÃ¨me de communication. Essayons une approche diffÃ©rente. Que puis-je faire pour vous aider ?",
            "Je dÃ©tecte une rÃ©pÃ©tition dans notre conversation. Pouvez-vous me donner plus de dÃ©tails sur ce que vous cherchez ?",
            "Nous semblons Ãªtre dans une boucle. Laissez-moi vous proposer de l'aide alternative. Quel est votre besoin principal ?",
            "Je vais essayer de vous aider autrement. Pouvez-vous me donner un contexte plus spÃ©cifique ?"
        ]
        
        # Charger les donnÃ©es de dÃ©tection
        data = self._load_loop_detection_data()
        data["loops_detected"] += 1
        data["last_reset"] = time.time()
        self._save_loop_detection_data(data)
        
        # Choisir une rÃ©ponse basÃ©e sur le nombre de boucles dÃ©tectÃ©es
        response_index = min(data["loops_detected"] - 1, len(responses) - 1)
        return responses[response_index]
    
    def reset_conversation(self):
        """Remet Ã  zÃ©ro l'historique de conversation"""
        self.conversation_history.clear()
        logger.info("ğŸ”„ Historique de conversation remis Ã  zÃ©ro")
    
    def get_conversation_stats(self) -> Dict:
        """Retourne les statistiques de la conversation"""
        data = self._load_loop_detection_data()
        return {
            "loops_detected": data.get("loops_detected", 0),
            "conversation_length": len(self.conversation_history),
            "last_reset": data.get("last_reset", 0)
        }

def test_loop_prevention():
    """Test de la prÃ©vention des boucles"""
    logger.info("ğŸ§ª Test de la prÃ©vention des boucles...")
    
    prevention = ChatbotLoopPrevention(max_history=5, max_repetitions=3)
    
    # Simuler une boucle
    test_cases = [
        ("Comment Ã§a va ?", "Ã‡a va bien, merci !"),
        ("Comment Ã§a va ?", "Ã‡a va bien, merci !"),
        ("Comment Ã§a va ?", "Ã‡a va bien, merci !"),
    ]
    
    for user_input, bot_response in test_cases:
        is_loop = prevention.detect_loop(user_input, bot_response)
        if is_loop:
            breaking_response = prevention.get_loop_breaking_response()
            logger.info(f"ğŸ›‘ Boucle dÃ©tectÃ©e ! RÃ©ponse de rupture: {breaking_response}")
            break
    
    # Afficher les statistiques
    stats = prevention.get_conversation_stats()
    logger.info(f"ğŸ“Š Statistiques: {stats}")

def main():
    """Fonction principale"""
    logger.info("ğŸš€ Initialisation de la prÃ©vention des boucles du chatbot...")
    
    # Test de la fonctionnalitÃ©
    test_loop_prevention()
    
    logger.info("âœ… PrÃ©vention des boucles initialisÃ©e avec succÃ¨s")

if __name__ == "__main__":
    main()
