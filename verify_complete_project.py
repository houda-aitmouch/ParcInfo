#!/usr/bin/env python3
"""
V√©rification compl√®te du projet ParcInfo
V√©rifie tous les composants : Django, RAG, Streamlit, d√©pendances, environnement
"""

import subprocess
import sys
import os
import platform

def print_header(title):
    """Afficher un en-t√™te de section"""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print(f"{'='*60}")

def check_system_info():
    """V√©rifier les informations syst√®me"""
    print_header("INFORMATIONS SYST√àME")
    
    print(f"üñ•Ô∏è  Syst√®me d'exploitation: {platform.system()} {platform.release()}")
    print(f"üêç Python syst√®me: {platform.python_version()}")
    print(f"üìç R√©pertoire de travail: {os.getcwd()}")
    
    # V√©rifier l'espace disque
    try:
        result = subprocess.run(["df", "-h", "."], capture_output=True, text=True)
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            if len(lines) > 1:
                parts = lines[1].split()
                if len(parts) >= 5:
                    print(f"üíæ Espace disque disponible: {parts[3]}")
    except:
        print("üíæ Espace disque: Non v√©rifiable")

def check_python_environments():
    """V√©rifier les environnements Python"""
    print_header("ENVIRONNEMENTS PYTHON")
    
    # Python syst√®me
    try:
        result = subprocess.run(["python3", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Python syst√®me: {result.stdout.strip()}")
        else:
            print("‚ùå Python syst√®me: Non disponible")
    except:
        print("‚ùå Python syst√®me: Non accessible")
    
    # Environnement virtuel RAG
    if os.path.exists("rag_env"):
        print("‚úÖ Environnement virtuel RAG: Pr√©sent")
        
        # V√©rifier Python dans l'environnement RAG
        try:
            result = subprocess.run(["rag_env/bin/python", "--version"], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"   Python RAG: {result.stdout.strip()}")
            else:
                print("   Python RAG: Non fonctionnel")
        except:
            print("   Python RAG: Non accessible")
    else:
        print("‚ùå Environnement virtuel RAG: Absent")
    
    # Anaconda
    try:
        result = subprocess.run(["conda", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Anaconda: {result.stdout.strip()}")
        else:
            print("‚ùå Anaconda: Non disponible")
    except:
        print("‚ùå Anaconda: Non install√©")

def check_django_environment():
    """V√©rifier l'environnement Django"""
    print_header("ENVIRONNEMENT DJANGO")
    
    # V√©rifier Django dans l'environnement RAG
    if os.path.exists("rag_env"):
        try:
            result = subprocess.run([
                "rag_env/bin/python", "-c", 
                "import django; print(f'‚úÖ Django {django.get_version()} dans RAG')"
            ], capture_output=True, text=True, check=True)
            print(result.stdout.strip())
        except subprocess.CalledProcessError:
            print("‚ùå Django dans RAG: Non disponible")
    
    # V√©rifier la configuration Django
    try:
        result = subprocess.run([
            "rag_env/bin/python", "manage.py", "check"
        ], capture_output=True, text=True, check=True)
        print("‚úÖ Configuration Django: Aucun probl√®me d√©tect√©")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Configuration Django: Probl√®mes d√©tect√©s")
        print(f"   Erreur: {e.stderr}")

def check_rag_system():
    """V√©rifier le syst√®me RAG"""
    print_header("SYST√àME RAG")
    
    if not os.path.exists("rag_env"):
        print("‚ùå Environnement RAG non disponible")
        return False
    
    venv_python = "rag_env/bin/python"
    
    # V√©rifier sentence-transformers
    try:
        result = subprocess.run([
            venv_python, "-c", 
            "import sentence_transformers; print('‚úÖ sentence-transformers disponible')"
        ], capture_output=True, text=True, check=True)
        print(result.stdout.strip())
    except subprocess.CalledProcessError:
        print("‚ùå sentence-transformers non disponible")
        return False
    
    # V√©rifier le syst√®me RAG complet
    try:
        result = subprocess.run([
            venv_python, "-c", 
            """
import sys
import os
import django

# Configuration Django
project_root = '/Users/HouDa/PycharmProjects/ParcInfo'
sys.path.insert(0, project_root)
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ParcInfo.settings')
django.setup()

from apps.chatbot.rag_manager import RAGManager
from apps.chatbot.core_chatbot import ParcInfoChatbot

# Test RAG Manager
rag = RAGManager()
if rag.embed_model:
    print('‚úÖ RAG Manager: Embedding disponible')
else:
    print('‚ùå RAG Manager: Embedding non disponible')

# Test Chatbot
chatbot = ParcInfoChatbot()
if chatbot.nlp_available:
    print('‚úÖ Chatbot: NLP disponible')
else:
    print('‚ùå Chatbot: NLP non disponible')

if chatbot.use_llm:
    print('‚úÖ Chatbot: LLM (Ollama) disponible')
else:
    print('‚ùå Chatbot: LLM non disponible')

print('‚úÖ Syst√®me RAG: Tous les composants fonctionnels')
            """
        ], capture_output=True, text=True, check=True)
        print(result.stdout.strip())
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur syst√®me RAG: {e.stderr}")
        return False

def check_streamlit():
    """V√©rifier Streamlit"""
    print_header("STREAMLIT")
    
    # V√©rifier si Streamlit est install√© dans l'environnement RAG
    if os.path.exists("rag_env"):
        try:
            result = subprocess.run([
                "rag_env/bin/python", "-c", 
                "import streamlit; print(f'‚úÖ Streamlit {streamlit.__version__} dans RAG')"
            ], capture_output=True, text=True, check=True)
            print(result.stdout.strip())
        except subprocess.CalledProcessError:
            print("‚ùå Streamlit dans RAG: Non install√©")
    
    # V√©rifier les dashboards Streamlit
    dashboard_files = [
        "dashboard_garantie/dashboard_simple.py",
        "dashboard_garantie/dashboard_garantie.py",
        "dashboard_garantie/launch_improved_dashboard.py"
    ]
    
    for file_path in dashboard_files:
        if os.path.exists(file_path):
            print(f"‚úÖ Dashboard: {file_path}")
        else:
            print(f"‚ùå Dashboard: {file_path} - Absent")
    
    # V√©rifier les requirements Streamlit
    if os.path.exists("requirements_streamlit.txt"):
        print("‚úÖ Requirements Streamlit: Pr√©sent")
    else:
        print("‚ùå Requirements Streamlit: Absent")

def check_ollama():
    """V√©rifier Ollama"""
    print_header("OLLAMA")
    
    try:
        result = subprocess.run(["ollama", "list"], capture_output=True, text=True, check=True)
        
        if "llama" in result.stdout.lower():
            print("‚úÖ Ollama: Mod√®les LLaMA disponibles")
            lines = result.stdout.strip().split('\n')
            for line in lines[1:]:  # Ignorer l'en-t√™te
                if line.strip():
                    print(f"   üì¶ {line.strip()}")
        else:
            print("‚ö†Ô∏è Ollama: Aucun mod√®le LLaMA trouv√©")
        
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Ollama: Service non accessible")
        return False
    except FileNotFoundError:
        print("‚ùå Ollama: Commande non trouv√©e")
        return False

def check_dependencies():
    """V√©rifier les d√©pendances principales"""
    print_header("D√âPENDANCES PRINCIPALES")
    
    if not os.path.exists("rag_env"):
        print("‚ùå Environnement RAG non disponible")
        return False
    
    venv_python = "rag_env/bin/python"
    
    dependencies = [
        ("Django", "django"),
        ("sentence-transformers", "sentence_transformers"),
        ("openpyxl", "openpyxl"),
        ("reportlab", "reportlab"),
        ("rapidfuzz", "rapidfuzz"),
        ("psycopg2", "psycopg2"),
        ("python-dotenv", "dotenv")
    ]
    
    all_available = True
    for name, module in dependencies:
        try:
            result = subprocess.run([
                venv_python, "-c", 
                f"import {module}; print(f'‚úÖ {name}: Disponible')"
            ], capture_output=True, text=True, check=True)
            print(result.stdout.strip())
        except subprocess.CalledProcessError:
            print(f"‚ùå {name}: Non disponible")
            all_available = False
    
    return all_available

def check_project_structure():
    """V√©rifier la structure du projet"""
    print_header("STRUCTURE DU PROJET")
    
    required_dirs = [
        "apps/",
        "ParcInfo/",
        "templates/",
        "static/",
        "docs/",
        "dashboard_garantie/",
        "rag_env/"
    ]
    
    for dir_path in required_dirs:
        if os.path.exists(dir_path):
            print(f"‚úÖ R√©pertoire: {dir_path}")
        else:
            print(f"‚ùå R√©pertoire: {dir_path} - Absent")
    
    # V√©rifier les fichiers cl√©s
    key_files = [
        "manage.py",
        "README.md",
        "requirements.txt",
        "launch_with_rag.sh",
        "test_chatbot_rag.py"
    ]
    
    for file_path in key_files:
        if os.path.exists(file_path):
            print(f"‚úÖ Fichier: {file_path}")
        else:
            print(f"‚ùå Fichier: {file_path} - Absent")

def check_git_status():
    """V√©rifier le statut Git"""
    print_header("STATUT GIT")
    
    try:
        # Statut du d√©p√¥t
        result = subprocess.run(["git", "status", "--porcelain"], capture_output=True, text=True, check=True)
        if result.stdout.strip():
            print("‚ö†Ô∏è  Fichiers modifi√©s non commit√©s:")
            for line in result.stdout.strip().split('\n'):
                if line.strip():
                    print(f"   {line.strip()}")
        else:
            print("‚úÖ D√©p√¥t Git: Aucune modification en attente")
        
        # Branche actuelle
        result = subprocess.run(["git", "branch", "--show-current"], capture_output=True, text=True, check=True)
        if result.returncode == 0:
            print(f"üåø Branche actuelle: {result.stdout.strip()}")
        
        # Dernier commit
        result = subprocess.run(["git", "log", "-1", "--oneline"], capture_output=True, text=True, check=True)
        if result.returncode == 0:
            print(f"üìù Dernier commit: {result.stdout.strip()}")
        
    except subprocess.CalledProcessError:
        print("‚ùå Erreur lors de la v√©rification Git")
    except FileNotFoundError:
        print("‚ùå Git non install√©")

def show_final_summary():
    """Afficher le r√©sum√© final"""
    print_header("R√âSUM√â FINAL")
    
    print("üéØ **PROJET PARCINFO - V√âRIFICATION COMPL√àTE**")
    print("")
    print("‚ú® **Composants v√©rifi√©s :**")
    print("   ‚Ä¢ Syst√®me d'exploitation et Python")
    print("   ‚Ä¢ Environnements Python (syst√®me, RAG, Anaconda)")
    print("   ‚Ä¢ Django et configuration")
    print("   ‚Ä¢ Syst√®me RAG avec sentence-transformers")
    print("   ‚Ä¢ Streamlit et dashboards")
    print("   ‚Ä¢ Ollama et mod√®les LLM")
    print("   ‚Ä¢ D√©pendances et packages")
    print("   ‚Ä¢ Structure du projet")
    print("   ‚Ä¢ Statut Git")
    print("")
    print("üöÄ **Comment utiliser le projet :**")
    print("")
    print("1. **Lancement avec RAG :**")
    print("   ./launch_with_rag.sh")
    print("")
    print("2. **Lancement manuel :**")
    print("   source rag_env/bin/activate")
    print("   python manage.py runserver")
    print("")
    print("3. **Test du syst√®me :**")
    print("   python test_chatbot_rag.py")
    print("")
    print("4. **Dashboard Streamlit :**")
    print("   cd dashboard_garantie")
    print("   streamlit run dashboard_simple.py")
    print("")
    print("üí° **Le projet ParcInfo est maintenant √©quip√© d'une IA avanc√©e !**")

def main():
    """Fonction principale"""
    print("üöÄ V√âRIFICATION COMPL√àTE DU PROJET PARCINFO")
    print("=" * 60)
    
    # V√©rifications
    check_system_info()
    check_python_environments()
    check_django_environment()
    check_rag_system()
    check_streamlit()
    check_ollama()
    check_dependencies()
    check_project_structure()
    check_git_status()
    
    # R√©sum√© final
    show_final_summary()

if __name__ == "__main__":
    main()
