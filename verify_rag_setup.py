#!/usr/bin/env python3
"""
V√©rification finale du syst√®me RAG de ParcInfo
Confirme que tout est bien configur√© et fonctionnel
"""

import subprocess
import sys
import os

def check_environment():
    """V√©rifier l'environnement de base"""
    print("üîç V√©rification de l'environnement...")
    
    # V√©rifier que l'environnement virtuel existe
    if not os.path.exists("rag_env"):
        print("‚ùå Environnement virtuel 'rag_env' non trouv√©")
        return False
    
    print("‚úÖ Environnement virtuel 'rag_env' pr√©sent")
    return True

def check_dependencies():
    """V√©rifier les d√©pendances dans l'environnement virtuel"""
    print("\nüîç V√©rification des d√©pendances...")
    
    venv_python = "rag_env/bin/python"
    
    # V√©rifier sentence-transformers
    try:
        result = subprocess.run([
            venv_python, "-c", 
            "import sentence_transformers; print('‚úÖ sentence-transformers disponible')"
        ], capture_output=True, text=True, check=True)
        print(result.stdout.strip())
    except subprocess.CalledProcessError:
        print("‚ùå sentence-transformers non disponible")
        return False
    
    # V√©rifier Django
    try:
        result = subprocess.run([
            venv_python, "-c", 
            "import django; print(f'‚úÖ Django {django.get_version()} disponible')"
        ], capture_output=True, text=True, check=True)
        print(result.stdout.strip())
    except subprocess.CalledProcessError:
        print("‚ùå Django non disponible")
        return False
    
    # V√©rifier openpyxl
    try:
        result = subprocess.run([
            venv_python, "-c", 
            "import openpyxl; print('‚úÖ openpyxl disponible')"
        ], capture_output=True, text=True, check=True)
        print(result.stdout.strip())
    except subprocess.CalledProcessError:
        print("‚ùå openpyxl non disponible")
        return False
    
    return True

def check_rag_system():
    """V√©rifier le syst√®me RAG complet"""
    print("\nüîç V√©rification du syst√®me RAG...")
    
    venv_python = "rag_env/bin/python"
    
    try:
        result = subprocess.run([
            venv_python, "-c", 
            """
import sys
import os
import django

# Configuration Django
project_root = '/Users/HouDa/PycharmProjects/ParcInfo'
sys.path.insert(0, project_root)
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ParcInfo.settings')
django.setup()

from apps.chatbot.rag_manager import RAGManager
from apps.chatbot.core_chatbot import ParcInfoChatbot

# Test RAG Manager
rag = RAGManager()
if rag.embed_model:
    print('‚úÖ RAG Manager: Embedding disponible')
else:
    print('‚ùå RAG Manager: Embedding non disponible')

# Test Chatbot
chatbot = ParcInfoChatbot()
if chatbot.nlp_available:
    print('‚úÖ Chatbot: NLP disponible')
else:
    print('‚ùå Chatbot: NLP non disponible')

if chatbot.use_llm:
    print('‚úÖ Chatbot: LLM (Ollama) disponible')
else:
    print('‚ùå Chatbot: LLM non disponible')

print('‚úÖ Syst√®me RAG: Tous les composants fonctionnels')
            """
        ], capture_output=True, text=True, check=True)
        print(result.stdout.strip())
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur syst√®me RAG: {e.stderr}")
        return False

def check_ollama():
    """V√©rifier qu'Ollama est accessible"""
    print("\nüîç V√©rification d'Ollama...")
    
    try:
        result = subprocess.run([
            "ollama", "list"
        ], capture_output=True, text=True, check=True)
        
        if "llama" in result.stdout.lower():
            print("‚úÖ Ollama: Mod√®les LLaMA disponibles")
            print(f"Mod√®les: {result.stdout.strip()}")
        else:
            print("‚ö†Ô∏è Ollama: Aucun mod√®le LLaMA trouv√©")
        
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Ollama: Service non accessible")
        return False
    except FileNotFoundError:
        print("‚ùå Ollama: Commande non trouv√©e")
        return False

def check_files():
    """V√©rifier que tous les fichiers RAG sont pr√©sents"""
    print("\nüîç V√©rification des fichiers RAG...")
    
    required_files = [
        "launch_with_rag.sh",
        "test_chatbot_rag.py",
        "RAG_README.md",
        "RAG_SETUP_COMPLETE.md",
        "rag_env/requirements.txt"
    ]
    
    all_present = True
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path}")
            all_present = False
    
    return all_present

def show_summary():
    """Afficher le r√©sum√© de la configuration"""
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DE LA CONFIGURATION RAG")
    print("=" * 60)
    print("")
    print("üéØ **Statut global : SYST√àME RAG OP√âRATIONNEL**")
    print("")
    print("‚ú® **Fonctionnalit√©s activ√©es :**")
    print("   ‚Ä¢ Recherche s√©mantique avec sentence-transformers")
    print("   ‚Ä¢ Gestionnaire RAG avec embeddings")
    print("   ‚Ä¢ Chatbot IA avec NLP et LLM")
    print("   ‚Ä¢ Int√©gration Ollama pour r√©ponses avanc√©es")
    print("")
    print("üöÄ **Comment utiliser :**")
    print("   ./launch_with_rag.sh")
    print("")
    print("üß™ **Comment tester :**")
    print("   python test_chatbot_rag.py")
    print("")
    print("üìö **Documentation :**")
    print("   RAG_README.md - Guide d'utilisation")
    print("   RAG_SETUP_COMPLETE.md - Configuration")
    print("")
    print("üí° **Le chatbot ParcInfo est maintenant intelligent !**")

def main():
    """Fonction principale de v√©rification"""
    print("üöÄ V√âRIFICATION FINALE DU SYST√àME RAG PARCINFO")
    print("=" * 60)
    
    checks = [
        ("Environnement", check_environment),
        ("D√©pendances", check_dependencies),
        ("Syst√®me RAG", check_rag_system),
        ("Ollama", check_ollama),
        ("Fichiers RAG", check_files)
    ]
    
    all_passed = True
    for check_name, check_func in checks:
        if not check_func():
            all_passed = False
            print(f"\n‚ùå V√©rification '{check_name}' √©chou√©e")
    
    if all_passed:
        print("\nüéâ TOUTES LES V√âRIFICATIONS SONT R√âUSSIES !")
        show_summary()
    else:
        print("\n‚ùå CERTAINES V√âRIFICATIONS ONT √âCHOU√â")
        print("üí° V√©rifiez les erreurs ci-dessus et corrigez-les")

if __name__ == "__main__":
    main()
