#!/usr/bin/env python3
"""
Script simple de restauration de la base de donn√©es ParcInfo
Ex√©cute les √©tapes dans l'ordre correct
"""
import os
import sys
import django
import psycopg2
from pathlib import Path

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ParcInfo.settings')
django.setup()

def restore_database():
    """Restaure la base de donn√©es √©tape par √©tape"""
    print("üóÑÔ∏è Restauration de la base de donn√©es ParcInfo...")
    
    try:
        from django.db import connection
        
        with connection.cursor() as cursor:
            # √âtape 1: Cr√©er les tables
            print("üìã √âtape 1: Cr√©ation des tables...")
            
            # Table fournisseurs
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS fournisseurs (
                    id SERIAL PRIMARY KEY,
                    nom VARCHAR(200) NOT NULL,
                    ice VARCHAR(50) UNIQUE,
                    adresse TEXT,
                    telephone VARCHAR(20),
                    email VARCHAR(100),
                    contact_principal VARCHAR(100),
                    statut VARCHAR(50) DEFAULT 'actif',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            print("  ‚úÖ Table fournisseurs cr√©√©e")
            
            # Table users_customuser
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users_customuser (
                    id SERIAL PRIMARY KEY,
                    username VARCHAR(150) UNIQUE NOT NULL,
                    email VARCHAR(254) UNIQUE NOT NULL,
                    first_name VARCHAR(150),
                    last_name VARCHAR(150),
                    role VARCHAR(50) DEFAULT 'utilisateur',
                    departement VARCHAR(100),
                    date_embauche DATE,
                    is_active BOOLEAN DEFAULT TRUE,
                    is_staff BOOLEAN DEFAULT FALSE,
                    date_joined TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_login TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            print("  ‚úÖ Table users_customuser cr√©√©e")
            
            # Table commande_informatique
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS commande_informatique (
                    id SERIAL PRIMARY KEY,
                    numero_commande VARCHAR(50) UNIQUE NOT NULL,
                    date_commande DATE NOT NULL,
                    date_livraison_prevue DATE,
                    date_livraison_effective DATE,
                    montant_total DECIMAL(10,2),
                    statut VARCHAR(50) DEFAULT 'en_cours',
                    fournisseur_id INTEGER NOT NULL,
                    utilisateur_id INTEGER,
                    notes TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            print("  ‚úÖ Table commande_informatique cr√©√©e")
            
            # Table commande_bureau
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS commande_bureau (
                    id SERIAL PRIMARY KEY,
                    numero_commande VARCHAR(50) UNIQUE NOT NULL,
                    date_commande DATE NOT NULL,
                    date_livraison_prevue DATE,
                    date_livraison_effective DATE,
                    montant_total DECIMAL(10,2),
                    statut VARCHAR(50) DEFAULT 'en_cours',
                    fournisseur_id INTEGER NOT NULL,
                    utilisateur_id INTEGER,
                    notes TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            print("  ‚úÖ Table commande_bureau cr√©√©e")
            
            # Table materiel_informatique
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS materiel_informatique (
                    id SERIAL PRIMARY KEY,
                    code_inventaire VARCHAR(50) UNIQUE NOT NULL,
                    designation VARCHAR(200) NOT NULL,
                    marque VARCHAR(100),
                    modele VARCHAR(100),
                    date_acquisition DATE,
                    prix_acquisition DECIMAL(10,2),
                    garantie_until DATE,
                    statut VARCHAR(50) DEFAULT 'actif',
                    localisation VARCHAR(100),
                    commande_id INTEGER,
                    fournisseur_id INTEGER,
                    utilisateur_id INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            print("  ‚úÖ Table materiel_informatique cr√©√©e")
            
            # Table materiel_bureautique
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS materiel_bureautique (
                    id SERIAL PRIMARY KEY,
                    code_inventaire VARCHAR(50) UNIQUE NOT NULL,
                    designation VARCHAR(200) NOT NULL,
                    marque VARCHAR(100),
                    modele VARCHAR(100),
                    date_acquisition DATE,
                    prix_acquisition DECIMAL(10,2),
                    garantie_until DATE,
                    statut VARCHAR(50) DEFAULT 'actif',
                    localisation VARCHAR(100),
                    commande_id INTEGER,
                    fournisseur_id INTEGER,
                    utilisateur_id INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            print("  ‚úÖ Table materiel_bureautique cr√©√©e")
            
            # Table livraison
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS livraison (
                    id SERIAL PRIMARY KEY,
                    commande_id INTEGER NOT NULL,
                    date_prevue DATE NOT NULL,
                    date_effective DATE,
                    statut VARCHAR(50) DEFAULT 'en_attente',
                    transporteur VARCHAR(100),
                    numero_suivi VARCHAR(100),
                    notes TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            print("  ‚úÖ Table livraison cr√©√©e")
            
            # Table demande_equipement
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS demande_equipement (
                    id SERIAL PRIMARY KEY,
                    utilisateur_id INTEGER NOT NULL,
                    type_equipement VARCHAR(100) NOT NULL,
                    description TEXT,
                    priorite VARCHAR(20) DEFAULT 'normale',
                    statut VARCHAR(50) DEFAULT 'en_attente',
                    date_demande DATE DEFAULT CURRENT_DATE,
                    date_approbation DATE,
                    date_reception DATE,
                    notes TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            print("  ‚úÖ Table demande_equipement cr√©√©e")
            
            # √âtape 2: Ins√©rer les donn√©es
            print("\nüìä √âtape 2: Insertion des donn√©es...")
            
            # Fournisseurs
            cursor.execute("""
                INSERT INTO fournisseurs (nom, ice, adresse, telephone, email, contact_principal) VALUES
                ('COHESIUM ICE', '001234567890123', '123 Rue Hassan II, Casablanca', '+212-5-22-123456', 'contact@cohesium.ma', 'Ahmed Benali'),
                ('TECHNOLOGIE PLUS SARL', '001234567890124', '456 Avenue Mohammed V, Rabat', '+212-5-37-123456', 'info@techplus.ma', 'Fatima Zahra'),
                ('INFORMATIQUE EXPRESS', '001234567890125', '789 Boulevard Al Massira, Marrakech', '+212-5-24-123456', 'contact@infoxpress.ma', 'Karim El Amrani'),
                ('DIGITAL SOLUTIONS', '001234567890126', '321 Rue Ibn Batouta, Tanger', '+212-5-39-123456', 'hello@digitalsolutions.ma', 'Sara Bennani'),
                ('SMART TECH ICE', '001234567890127', '654 Avenue Hassan I, F√®s', '+212-5-35-123456', 'info@smarttech.ma', 'Omar Tazi')
                ON CONFLICT (ice) DO NOTHING
            """)
            print("  ‚úÖ Fournisseurs ins√©r√©s")
            
            # Utilisateurs
            cursor.execute("""
                INSERT INTO users_customuser (username, email, first_name, last_name, is_staff, is_active, is_superuser, password, date_joined) VALUES
                ('admin', 'admin@parcinfo.ma', 'Administrateur', 'Syst√®me', TRUE, TRUE, TRUE, 'pbkdf2_sha256$600000$test123$hash', CURRENT_TIMESTAMP),
                ('gestionnaire_bureau', 'bureau@parcinfo.ma', 'Gestionnaire', 'Bureau', FALSE, TRUE, FALSE, 'pbkdf2_sha256$600000$test123$hash', CURRENT_TIMESTAMP),
                ('utilisateur1', 'user1@parcinfo.ma', 'Utilisateur', 'Test', FALSE, TRUE, FALSE, 'pbkdf2_sha256$600000$test123$hash', CURRENT_TIMESTAMP),
                ('technicien', 'tech@parcinfo.ma', 'Technicien', 'Support', FALSE, TRUE, FALSE, 'pbkdf2_sha256$600000$test123$hash', CURRENT_TIMESTAMP),
                ('manager', 'manager@parcinfo.ma', 'Manager', 'Projet', FALSE, TRUE, FALSE, 'pbkdf2_sha256$600000$test123$hash', CURRENT_TIMESTAMP)
                ON CONFLICT (username) DO NOTHING
            """)
            print("  ‚úÖ Utilisateurs ins√©r√©s")
            
            # Commandes informatiques
            cursor.execute("""
                INSERT INTO commande_informatique (numero_commande, date_commande, date_livraison_prevue, date_livraison_effective, montant_total, statut, fournisseur_id, utilisateur_id) VALUES
                ('BC23', '2025-08-15', '2025-08-20', '2025-08-20', 15000.00, 'livree', 1, 1),
                ('BC24', '2025-08-18', '2025-08-25', '2025-08-22', 8500.00, 'livree', 2, 2),
                ('BC25', '2025-08-20', '2025-08-30', NULL, 12000.00, 'en_cours', 3, 3),
                ('BC26', '2025-08-22', '2025-09-01', NULL, 9500.00, 'en_cours', 4, 4),
                ('BC27', '2025-08-25', '2025-09-05', NULL, 18000.00, 'en_cours', 5, 5)
                ON CONFLICT (numero_commande) DO NOTHING
            """)
            print("  ‚úÖ Commandes informatiques ins√©r√©es")
            
            # √âtape 3: Cr√©er les index
            print("\nüîó √âtape 3: Cr√©ation des index...")
            
            # Index essentiels
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_materiel_code_inventaire ON materiel_informatique(code_inventaire)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_commande_numero ON commande_informatique(numero_commande)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_fournisseur_ice ON fournisseurs(ice)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_user_username ON users_customuser(username)")
            
            print("  ‚úÖ Index cr√©√©s")
            
            # Valider les changements
            connection.commit()
            print("\n‚úÖ Base de donn√©es restaur√©e avec succ√®s!")
            
            # V√©rification finale
            print("\nüîç V√©rification finale...")
            cursor.execute("SELECT COUNT(*) FROM fournisseurs")
            fournisseur_count = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM users_customuser")
            user_count = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM commande_informatique")
            commande_count = cursor.fetchone()[0]
            
            print(f"  üìä Fournisseurs: {fournisseur_count}")
            print(f"  üìä Utilisateurs: {user_count}")
            print(f"  üìä Commandes: {commande_count}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la restauration: {e}")
        return False

if __name__ == "__main__":
    success = restore_database()
    sys.exit(0 if success else 1)
