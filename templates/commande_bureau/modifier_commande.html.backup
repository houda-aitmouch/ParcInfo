{% load static %}
<!DOCTYPE html>
<html lang="fr" x-data="dataCommande()" x-init="init()" x-cloak>
<head>
  <meta charset="UTF-8" />
  <title>Modifier une commande</title>
  <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>  <link rel="stylesheet" href="{% static 'css/parcinfo-ui.css' %}">
  <link rel="stylesheet" href="{% static 'react/assets/index.css' %}">
</head>
<body class="bg-gray-100 min-h-screen p-8 font-sans text-gray-900">

  <div class="max-w-5xl mx-auto bg-white p-6 rounded shadow">
    <h1 class="text-2xl font-bold mb-6">Modifier une commande Bureau</h1>
    <form method="post" x-ref="formDjango">
      {% csrf_token %}

      <!-- Commande globale -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div>
          <label class="block font-semibold mb-1">Mode de passation</label>
          {{ form.mode_passation }}
        </div>
        <div>
          <label class="block font-semibold mb-1">Numéro de commande</label>
          {{ form.numero_commande }}
        </div>
        <div>
          <label class="block font-semibold mb-1">Date de commande</label>
          <input type="date" name="date_commande" class="w-full border rounded px-3 py-2" required value="{{ commande.date_commande|date:'Y-m-d' }}" />
        </div>
        <div class="relative">
          <label class="block font-semibold mb-1">Fournisseur</label>
          <select
            name="fournisseur"
            x-model="fournisseurId"
            class="w-full border rounded px-3 py-2"
            x-ref="fournisseurSelect"
            required
          >
            <option value="">-- Choisir --</option>
            {% for f in fournisseurs %}
              <option value="{{ f.id }}" {% if commande.fournisseur_id == f.id %}selected{% endif %}>{{ f.nom }}</option>
            {% endfor %}
          </select>
          <button
            type="button"
            @click="showFournisseurModal = true"
            class="absolute right-2 top-8 text-green-600 font-bold px-2 rounded hover:bg-green-100"
            title="Ajouter un fournisseur"
          >+</button>
        </div>
        <div>
          <label class="block font-semibold mb-1">Date de réception</label>
          <input type="date" name="date_reception" class="w-full border rounded px-3 py-2" required value="{{ commande.date_reception|date:'Y-m-d' }}" />
        </div>
        <div>
          <label class="block font-semibold mb-1">Numéro de facture</label>
          <input type="text" name="numero_facture" class="w-full border rounded px-3 py-2" required value="{{ commande.numero_facture }}" />
        </div>
        <div>
          <div class="flex gap-2 items-end">
            <div>
              <label class="block font-semibold mb-1">Durée de garantie</label>
              {{ form.duree_garantie_valeur }}
            </div>
            <div>
              <label class="block font-semibold mb-1 invisible">Unité</label>
              {{ form.duree_garantie_unite }}
            </div>
          </div>
        </div>
      </div>

      <!-- Lignes de commande dynamiques -->
      <template x-for="(ligne, index) in lignesCommande" :key="index">
        <div class="mb-6 border rounded p-4 relative bg-gray-50">
          <input type="hidden" :name="`lignes-${index}-id`" :value="ligne.id">
          <button
            type="button"
            @click="supprimerLigne(index)"
            class="absolute top-2 right-2 text-red-600 hover:text-red-900 font-bold"
            title="Supprimer cette ligne"
          >✕</button>

          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <!-- Désignation -->
            <div>
              <label class="block font-semibold mb-1">Désignation</label>
              <div class="relative">
                <select
                  :name="`lignes-${index}-designation`"
                  x-model="ligne.designationId"
                  @change="fetchDescriptions(index)"
                  class="w-full border rounded px-3 py-2"
                  required
                  x-effect="
                    $el.value = ligne.designationId;
                  "
                >
                  <option value="">-- Choisir --</option>
                  <template x-for="d in designations" :key="d.id">
                    <option :value="'' + d.id" x-text="d.nom"></option>
                  </template>
                </select>
                <button
                  type="button"
                  @click="showDesignationModal = true"
                  class="absolute right-2 top-2 text-green-600 font-bold px-2 rounded hover:bg-green-100"
                  title="Ajouter une désignation"
                >+</button>
              </div>
            </div>

            <!-- Description -->
            <div>
              <label class="block font-semibold mb-1">Description</label>
              <div class="relative">
                <select
                  :name="`lignes-${index}-description`"
                  x-model="ligne.descriptionId"
                  class="w-full border rounded px-3 py-2"
                  required
                  :key="ligne.descriptionId + '-' + ligne.descriptions.length"
                  x-effect="
                    $el.value = ligne.descriptionId;
                  "
                >
                  <option value="">-- Choisir --</option>
                  <template x-for="desc in ligne.descriptions" :key="desc.id">
                    <option :value="'' + desc.id" x-text="desc.nom"></option>
                  </template>
                </select>
                <button
                  type="button"
                  @click="showDescriptionModal = true"
                  class="absolute right-2 top-2 text-green-600 font-bold px-2 rounded hover:bg-green-100"
                  title="Ajouter une description"
                >+</button>
              </div>
            </div>

            <!-- Quantité -->
            <div>
              <label class="block font-semibold mb-1">Quantité</label>
              <input
                type="number"
                min="1"
                :name="`lignes-${index}-quantite`"
                x-model.number="ligne.quantite"
                class="w-full border rounded px-3 py-2"
                required
              />
            </div>
          </div>

          <!-- Prix unitaire -->
          <div>
            <label class="block font-semibold mb-1">Prix unitaire</label>
            <input
              type="number"
              min="0"
              step="0.01"
              :name="`lignes-${index}-prix_unitaire`"
              x-model.number="ligne.prix_unitaire"
              class="w-full border rounded px-3 py-2"
              required
            />
          </div>
        </div>
      </template>

      <button
        type="button"
        @click="ajouterLigne"
        class="mb-6 bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded font-semibold"
      >Autre</button>

      <div>
        <button
          type="submit"
          class="bg-green-600 hover:bg-green-700 text-white font-semibold px-6 py-3 rounded w-full"
        >Enregistrer la commande</button>
      </div>
    </form>
  </div>

  <!-- Modal Ajout Fournisseur -->
  <div
    x-show="showFournisseurModal"
    x-cloak
    class="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50"
  >
    <div class="bg-white p-6 rounded shadow-lg w-96 max-h-[90vh] overflow-auto">
      <h2 class="text-lg font-bold mb-4">Ajouter un fournisseur</h2>
      <div class="space-y-4">
        <div>
          <label class="block font-semibold mb-1">Nom *</label>
          <input
            type="text"
            x-model="newFournisseur.nom"
            placeholder="Nom fournisseur"
            class="w-full border px-3 py-2 rounded"
            required
          />
        </div>
        <div>
          <label class="block font-semibold mb-1">Identifiant Fiscal (IF) *</label>
          <input
            type="text"
            x-model="newFournisseur.if_fiscal"
            placeholder="Identifiant Fiscal"
            class="w-full border px-3 py-2 rounded"
            required
          />
        </div>
        <div>
          <label class="block font-semibold mb-1">ICE</label>
          <input
            type="text"
            x-model="newFournisseur.ice"
            placeholder="ICE"
            class="w-full border px-3 py-2 rounded"
          />
        </div>
        <div>
          <label class="block font-semibold mb-1">Registre Commerce (RC)</label>
          <input
            type="text"
            x-model="newFournisseur.registre_commerce"
            placeholder="Registre Commerce"
            class="w-full border px-3 py-2 rounded"
          />
        </div>
        <div>
          <label class="block font-semibold mb-1">Adresse</label>
          <textarea
            x-model="newFournisseur.adresse"
            placeholder="Adresse"
            class="w-full border px-3 py-2 rounded"
          ></textarea>
        </div>
      </div>
      <div class="text-right mt-6">
        <button type="button" @click="showFournisseurModal = false" class="mr-2 text-gray-600">Annuler</button>
        <button type="button" @click="ajouterFournisseur" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded">Ajouter</button>
      </div>
    </div>
  </div>

  <!-- Modal Ajout Désignation -->
  <div
    x-show="showDesignationModal"
    x-cloak
    class="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50"
  >
    <div class="bg-white p-6 rounded shadow-lg w-96">
      <h2 class="text-lg font-bold mb-4">Nouvelle Désignation</h2>
      <input
        type="text"
        x-model="newDesignation"
        placeholder="Nom désignation"
        class="w-full border px-3 py-2 rounded mb-4"
      />
      <div class="text-right">
        <button type="button" @click="showDesignationModal = false" class="mr-2 text-gray-600">Annuler</button>
        <button type="button" @click="ajouterDesignation" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded">Ajouter</button>
      </div>
    </div>
  </div>

  <!-- Modal Ajout Description -->
  <div
    x-show="showDescriptionModal"
    x-cloak
    class="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50"
  >
    <div class="bg-white p-6 rounded shadow-lg w-96 max-h-[90vh] overflow-auto">
      <h2 class="text-lg font-bold mb-4">Nouvelle Description</h2>
      <input
        type="text"
        x-model="newDescription"
        placeholder="Texte description"
        class="w-full border px-3 py-2 rounded mb-4"
      />
      <label class="block mb-2 font-semibold">Désignation liée</label>
      <select
        x-model="designationForDescription"
        class="w-full border rounded px-3 py-2 mb-4"
        required
      >
        <option value="">-- Choisir --</option>
        <template x-for="d in designations" :key="d.id">
          <option :value="'' + d.id" x-text="d.nom"></option>
        </template>
      </select>
      <div class="text-right">
        <button type="button" @click="showDescriptionModal = false" class="mr-2 text-gray-600">Annuler</button>
        <button type="button" @click="ajouterDescription" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded">Ajouter</button>
      </div>
    </div>
  </div>

<script>
function dataCommande() {
  return {
    fournisseurId: '{{ commande.fournisseur_id }}',
    newFournisseur: {
      nom: '',
      if_fiscal: '',
      ice: '',
      registre_commerce: '',
      adresse: '',
    },
    showFournisseurModal: false,

    designations: JSON.parse('{{ designations_json|escapejs }}'),

    lignesCommande: (() => {
      try {
        const data = JSON.parse('{{ lignes_commande_json|escapejs }}');
        return data.map(ligne => ({
          ...ligne,
          id: ligne.id, // <-- doit exister
          designationId: ligne.designationId ? String(ligne.designationId) : '',
          descriptionId: ligne.descriptionId ? String(ligne.descriptionId) : '',
        }));
      } catch {
        return [{ designationId: '', descriptionId: '', descriptions: [], quantite: 1, prix_unitaire: '' }];
      }
    })(),

    showDesignationModal: false,
    newDesignation: '',

    showDescriptionModal: false,
    newDescription: '',
    designationForDescription: '',

    // Synchronise les descriptions au chargement et garde la sélection
    init() {
      this.lignesCommande.forEach((ligne, index) => {
        if (ligne.designationId) {
          // Forçage DOM pour la désignation
          this.$nextTick(() => {
            const select = document.querySelector(`[name='lignes-${index}-designation']`);
            if (select) select.value = this.lignesCommande[index].designationId;
          });
          fetch(`/commande-bureau/api/descriptions/${ligne.designationId}/`)
            .then(res => res.json())
            .then(data => {
              this.lignesCommande[index].descriptions = data;
              if (data.some(desc => String(desc.id) === String(ligne.descriptionId))) {
                this.lignesCommande[index].descriptionId = String(ligne.descriptionId);
              } else if (data.length > 0) {
                this.lignesCommande[index].descriptionId = String(data[0].id);
              } else {
                this.lignesCommande[index].descriptionId = '';
              }
              // Forçage DOM
              this.$nextTick(() => {
                const select = document.querySelector(`[name='lignes-${index}-description']`);
                if (select) select.value = this.lignesCommande[index].descriptionId;
              });
            });
        }
      });
    },

    fetchDescriptions(index) {
      const ligne = this.lignesCommande[index];
      if (!ligne.designationId) {
        ligne.descriptions = [];
        ligne.descriptionId = '';
        return;
      }
      fetch(`/commande-bureau/api/descriptions/${ligne.designationId}/`)
        .then(res => res.json())
        .then(data => {
          this.lignesCommande[index].descriptions = data;
          this.lignesCommande[index].descriptionId = '';
          // Forçage DOM
          this.$nextTick(() => {
            const select = document.querySelector(`[name='lignes-${index}-description']`);
            if (select) select.value = '';
          });
        });
    },

    ajouterLigne() {
      this.lignesCommande.push({
        designationId: '',
        descriptionId: '',
        descriptions: [],
        quantite: 1,
        prix_unitaire: '',
      });
    },

    supprimerLigne(index) {
      this.lignesCommande.splice(index, 1);
    },

    ajouterFournisseur() {
      if (!this.newFournisseur.nom.trim() || !this.newFournisseur.if_fiscal.trim()) {
        alert("Le nom et l'identifiant fiscal sont obligatoires");
        return;
      }
      fetch('/commande-bureau/api/ajouter_fournisseur/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRFToken': '{{ csrf_token }}',
        },
        body: JSON.stringify(this.newFournisseur),
      })
      .then(res => res.json())
      .then(data => {
        if (data.id) {
          const select = this.$refs.fournisseurSelect || document.querySelector('select[x-model="fournisseurId"]');
          const option = document.createElement('option');
          option.value = data.id;
          option.text = data.nom;
          option.selected = true;
          select.appendChild(option);
          this.fournisseurId = data.id;
          this.newFournisseur = { nom: '', if_fiscal: '', ice: '', registre_commerce: '', adresse: '' };
          this.showFournisseurModal = false;
        } else {
          alert(data.error || 'Erreur lors de l\'ajout');
        }
      });
    },

    ajouterDesignation() {
      if (!this.newDesignation.trim()) {
        alert("Le nom de la désignation est requis");
        return;
      }
      fetch('/commande-bureau/api/ajouter_designation/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRFToken': '{{ csrf_token }}',
        },
        body: JSON.stringify({ nom: this.newDesignation.trim() }),
      })
      .then(res => res.json())
      .then(data => {
        if (data.id) {
          this.designations.push(data);
          this.newDesignation = '';
          this.showDesignationModal = false;
        } else {
          alert(data.error || 'Erreur lors de l\'ajout');
        }
      });
    },

    ajouterDescription() {
      if (!this.newDescription.trim()) {
        alert("Le texte de la description est requis");
        return;
      }
      if (!this.designationForDescription) {
        alert("La désignation liée est requise");
        return;
      }
      fetch('/commande-bureau/api/ajouter_description/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRFToken': '{{ csrf_token }}',
        },
        body: JSON.stringify({
          nom: this.newDescription.trim(),
          designation_id: this.designationForDescription,
        }),
      })
      .then(res => res.json())
      .then(data => {
        if (data.id) {
          // Add to global descriptions for lines that match or new lines
          this.lignesCommande.forEach(ligne => {
            if (ligne.designationId == this.designationForDescription) {
              ligne.descriptions.push(data);
            }
          });
          this.newDescription = '';
          this.showDescriptionModal = false;
        } else {
          alert(data.error || 'Erreur lors de l\'ajout');
        }
      });
    },
  }
}
</script></body>
</html>