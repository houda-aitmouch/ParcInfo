#!/usr/bin/env python3
"""
Script pour t√©l√©charger manuellement les mod√®les Hugging Face
et les placer dans le bon r√©pertoire de cache.
"""

import os
import sys
import requests
import time
from pathlib import Path
from urllib.parse import urlparse
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def download_file_with_retry(url: str, filepath: Path, max_attempts: int = 5) -> bool:
    """
    T√©l√©charge un fichier avec retry logic et gestion des timeouts
    """
    headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
    }
    
    for attempt in range(max_attempts):
        try:
            logger.info(f"Tentative {attempt + 1}/{max_attempts} pour t√©l√©charger {url}")
            
            # Cr√©er le r√©pertoire parent si n√©cessaire
            filepath.parent.mkdir(parents=True, exist_ok=True)
            
            # T√©l√©chargement avec timeout progressif
            timeout = (attempt + 1) * 60  # 60s, 120s, 180s, 240s, 300s
            
            response = requests.get(url, headers=headers, timeout=timeout, stream=True)
            response.raise_for_status()
            
            # T√©l√©chargement par chunks pour √©viter les timeouts
            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0
            chunk_size = 8192
            
            with open(filepath, 'wb') as f:
                for chunk in response.iter_content(chunk_size=chunk_size):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        
                        # Afficher le progr√®s
                        if total_size > 0:
                            progress = (downloaded / total_size) * 100
                            if downloaded % (chunk_size * 100) == 0:  # Afficher tous les 100 chunks
                                logger.info(f"Progr√®s: {progress:.1f}% ({downloaded}/{total_size} bytes)")
            
            logger.info(f"‚úÖ Fichier t√©l√©charg√©: {filepath}")
            return True
            
        except Exception as e:
            logger.warning(f"Tentative {attempt + 1} √©chou√©e: {str(e)}")
            
            if attempt < max_attempts - 1:
                wait_time = 2 ** attempt * 10  # Attente exponentielle
                logger.info(f"Attente de {wait_time} secondes...")
                time.sleep(wait_time)
            else:
                logger.error(f"Toutes les tentatives ont √©chou√© pour {url}")
                return False
    
    return False

def get_model_files(model_name: str) -> list:
    """
    R√©cup√®re la liste des fichiers du mod√®le depuis l'API Hugging Face
    """
    try:
        from huggingface_hub import HfApi
        api = HfApi()
        
        # R√©cup√©rer les informations du mod√®le
        model_info = api.model_info(model_name)
        
        files = []
        for file_info in model_info.siblings:
            if file_info.rfilename.endswith(('.bin', '.safetensors', '.json', '.txt')):
                files.append({
                    'filename': file_info.rfilename,
                    'url': f"https://huggingface.co/{model_name}/resolve/main/{file_info.rfilename}",
                    'size': file_info.size
                })
        
        return files
        
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des fichiers du mod√®le: {e}")
        return []

def download_model_manually(model_name: str) -> bool:
    """
    T√©l√©charge manuellement tous les fichiers d'un mod√®le
    """
    logger.info(f"T√©l√©chargement manuel de {model_name}...")
    
    # Configuration des r√©pertoires de cache
    cache_dir = Path.home() / '.cache' / 'huggingface' / 'hub'
    model_cache_dir = cache_dir / f"models--{model_name.replace('/', '--')}"
    
    # R√©cup√©rer la liste des fichiers
    files = get_model_files(model_name)
    
    if not files:
        logger.error("Impossible de r√©cup√©rer la liste des fichiers du mod√®le")
        return False
    
    logger.info(f"Fichiers √† t√©l√©charger: {len(files)}")
    
    success_count = 0
    for file_info in files:
        file_path = model_cache_dir / "snapshots" / "main" / file_info['filename']
        
        if file_path.exists():
            logger.info(f"Fichier d√©j√† pr√©sent: {file_info['filename']}")
            success_count += 1
            continue
        
        if download_file_with_retry(file_info['url'], file_path):
            success_count += 1
    
    logger.info(f"T√©l√©chargement termin√©: {success_count}/{len(files)} fichiers")
    return success_count == len(files)

def main():
    """Fonction principale"""
    logger.info("D√©marrage du t√©l√©chargement manuel des mod√®les...")
    
    # Mod√®les √† t√©l√©charger
    models = [
        'sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2'
    ]
    
    success_count = 0
    for model_name in models:
        if download_model_manually(model_name):
            success_count += 1
            logger.info(f"‚úÖ {model_name} t√©l√©charg√© avec succ√®s")
        else:
            logger.error(f"‚ùå √âchec du t√©l√©chargement de {model_name}")
    
    if success_count == len(models):
        logger.info("üéâ Tous les mod√®les ont √©t√© t√©l√©charg√©s avec succ√®s!")
        return 0
    else:
        logger.warning("‚ö†Ô∏è Certains mod√®les n'ont pas pu √™tre t√©l√©charg√©s")
        return 1

if __name__ == "__main__":
    sys.exit(main())
