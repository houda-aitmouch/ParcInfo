#!/usr/bin/env python3
"""
Script de test pour valider les am√©liorations apport√©es au chatbot ParcInfo

Auteur: Assistant IA
Date: 18/08/2025
"""

import os
import sys
import django
import time

# Configuration Django
sys.path.append('/Users/HouDa/PycharmProjects/ParcInfo')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ParcInfo.settings')
django.setup()

from apps.chatbot.core_chatbot import ParcInfoChatbot

def test_chatbot_improvements():
    """Teste les am√©liorations apport√©es au chatbot"""
    print("üß™ Test des Am√©liorations du Chatbot ParcInfo")
    print("="*60)
    
    try:
        # Initialisation du chatbot
        chatbot = ParcInfoChatbot()
        print("‚úÖ Chatbot initialis√© avec succ√®s")
        
        # Test des nouvelles fonctionnalit√©s
        print("\nüîç Test des nouvelles fonctionnalit√©s...")
        
        # V√©rifier que les m√©thodes d'am√©lioration sont pr√©sentes
        improvements_available = [
            '_validate_response_quality',
            '_improve_tone',
            '_handle_edge_case',
            '_check_data_consistency'
        ]
        
        for method in improvements_available:
            if hasattr(chatbot, method):
                print(f"‚úÖ {method} : Disponible")
            else:
                print(f"‚ùå {method} : Manquante")
        
        # Test des questions avec am√©liorations
        test_questions = [
            "Quels mat√©riels sont stock√©s √† l'√©tage 1 ?",
            "Quelles demandes sont associ√©es √† la comande BC23 ?",
            "Quel est le statut des livraisons pour le fourniseur 3STD ?"
        ]
        
        print(f"\nüß™ Test des questions avec am√©liorations...")
        
        for i, question in enumerate(test_questions, 1):
            print(f"\nüîç Test {i}: {question}")
            
            start_time = time.time()
            try:
                response = chatbot.process_query(question)
                response_time = time.time() - start_time
                
                if isinstance(response, dict):
                    response_text = response.get('response', '')
                    intent = response.get('intent', 'unknown')
                    confidence = response.get('confidence', 0)
                    source = response.get('source', 'unknown')
                    
                    print(f"‚úÖ R√©ponse re√ßue en {response_time:.2f}s")
                    print(f"   Intent: {intent} (confiance: {confidence:.1f})")
                    print(f"   Source: {source}")
                    print(f"   R√©ponse: {response_text[:150]}...")
                    
                    # Validation des am√©liorations
                    print(f"   üìä Validation des am√©liorations:")
                    
                    # V√©rifier l'introduction
                    if any(word in response_text[:30] for word in ['Bonjour', 'Salut', 'Hello']):
                        print(f"      ‚úÖ Introduction engageante pr√©sente")
                    else:
                        print(f"      ‚ö†Ô∏è Introduction manquante")
                    
                    # V√©rifier la conclusion
                    if '?' in response_text or any(word in response_text[-50:] for word in ['Besoin', 'Veux-tu', 'Voulez-vous']):
                        print(f"      ‚úÖ Invitation √† poursuivre pr√©sente")
                    else:
                        print(f"      ‚ö†Ô∏è Invitation manquante")
                    
                    # V√©rifier les r√©p√©titions
                    if 'num√©ro de num√©ro de s√©rie' in response_text:
                        print(f"      ‚ùå R√©p√©tition d√©tect√©e")
                    else:
                        print(f"      ‚úÖ Pas de r√©p√©tition")
                    
                    # V√©rifier les num√©ros de s√©rie incorrects
                    if '123456' in response_text or '12345' in response_text:
                        print(f"      ‚ùå Num√©ros de s√©rie incorrects d√©tect√©s")
                    else:
                        print(f"      ‚úÖ Num√©ros de s√©rie corrects")
                        
                else:
                    print(f"‚úÖ R√©ponse re√ßue en {response_time:.2f}s")
                    print(f"   R√©ponse: {str(response)[:150]}...")
                    
            except Exception as e:
                print(f"‚ùå Erreur: {e}")
        
        print("\n‚úÖ Tests des am√©liorations termin√©s avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale"""
    print("üöÄ Validation des Am√©liorations du Chatbot ParcInfo")
    print("üìÖ Date: 18/08/2025")
    print("üéØ Objectif: Valider les am√©liorations impl√©ment√©es")
    
    try:
        # Test des am√©liorations
        success = test_chatbot_improvements()
        
        if success:
            print("\nüéâ Toutes les am√©liorations sont fonctionnelles!")
            print("‚úÖ Le chatbot est maintenant am√©lior√© avec:")
            print("   ‚Ä¢ Validation des r√©ponses")
            print("   ‚Ä¢ Coh√©rence du ton")
            print("   ‚Ä¢ Gestion intelligente des cas limites")
            print("   ‚Ä¢ Validation de coh√©rence des donn√©es")
        else:
            print("\n‚ö†Ô∏è Certaines am√©liorations ne fonctionnent pas correctement")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Tests interrompus par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
