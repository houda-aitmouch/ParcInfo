# apps/chatbot/management/commands/vectorize_all_models.py
import time
from django.core.management.base import BaseCommand
from django.db import connection
from apps.chatbot.auto_vectorization import vectorize_all_models
from apps.chatbot.models import DocumentVector


class Command(BaseCommand):
    help = 'Vectorisation compl√®te et optimis√©e de tous les mod√®les du projet ParcInfo'

    def add_arguments(self, parser):
        parser.add_argument(
            '--app',
            type=str,
            help='Vectoriser uniquement les mod√®les d\'une application sp√©cifique'
        )
        parser.add_argument(
            '--model',
            type=str,
            help='Vectoriser un mod√®le sp√©cifique (format: app.Model)'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Simulation sans ex√©cution r√©elle'
        )
        parser.add_argument(
            '--stats',
            action='store_true',
            help='Afficher uniquement les statistiques actuelles'
        )

    def handle(self, *args, **options):
        start_time = time.time()
        
        # Affichage des statistiques uniquement
        if options['stats']:
            self.show_statistics()
            return
        
        # Mode simulation
        if options['dry_run']:
            self.stdout.write(
                self.style.WARNING('üîç MODE SIMULATION - Aucune modification ne sera effectu√©e')
            )
            self.show_statistics()
            return
        
        self.stdout.write(
            self.style.SUCCESS('üöÄ D√©but de la vectorisation compl√®te du projet ParcInfo...')
        )
        
        # Statistiques avant
        initial_count = DocumentVector.objects.count()
        self.stdout.write(f"üìä Vecteurs actuels: {initial_count}")
        
        try:
            # Ex√©cution de la vectorisation
            final_count = vectorize_all_models()
            
            # Calcul du temps d'ex√©cution
            execution_time = time.time() - start_time
            
            # Rapport final
            self.stdout.write(
                self.style.SUCCESS(
                    f'\n‚úÖ Vectorisation termin√©e avec succ√®s!'
                )
            )
            self.stdout.write(f"‚è±Ô∏è  Temps d'ex√©cution: {execution_time:.2f}s")
            self.stdout.write(f"üìà Vecteurs g√©n√©r√©s: {final_count}")
            self.stdout.write(f"üîÑ Diff√©rence: +{final_count - initial_count}")
            
            # Validation de la coh√©rence
            self.validate_coherence()
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erreur lors de la vectorisation: {e}')
            )
            raise

    def show_statistics(self):
        """Affiche les statistiques actuelles des vecteurs"""
        self.stdout.write(self.style.SUCCESS('\nüìä STATISTIQUES ACTUELLES:'))
        
        # Comptage total
        total_vectors = DocumentVector.objects.count()
        self.stdout.write(f"üìà Total vecteurs: {total_vectors}")
        
        if total_vectors == 0:
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è  Aucun vecteur trouv√© - Ex√©cutez la vectorisation"))
            return
        
        # R√©partition par mod√®le
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT app_label, model_name, COUNT(*) as count
                FROM chatbot_documentvector
                GROUP BY app_label, model_name
                ORDER BY count DESC
            """)
            
            self.stdout.write("\nüìã R√©partition par mod√®le:")
            for app_label, model_name, count in cursor.fetchall():
                self.stdout.write(f"  {app_label}.{model_name}: {count} vecteurs")

    def validate_coherence(self):
        """Valide la coh√©rence RAG-DB"""
        from django.apps import apps
        
        # Comptage des enregistrements DB
        total_db_records = 0
        model_counts = {}
        
        # Applications cibles
        target_apps = [
            'fournisseurs', 'materiel_informatique', 'commande_informatique',
            'materiel_bureautique', 'commande_bureau', 'demande_equipement',
            'livraison', 'users'
        ]
        
        for app_label in target_apps:
            try:
                app_models = apps.get_app_config(app_label).get_models()
                for model_class in app_models:
                    count = model_class.objects.count()
                    if count > 0:
                        model_key = f"{app_label}.{model_class.__name__}"
                        model_counts[model_key] = count
                        total_db_records += count
            except Exception as e:
                self.stdout.write(
                    self.style.WARNING(f"‚ö†Ô∏è Erreur comptage {app_label}: {e}")
                )
        
        # Comptage des vecteurs RAG
        total_vectors = DocumentVector.objects.count()
        
        # Calcul du ratio de coh√©rence
        if total_db_records > 0:
            coherence_ratio = (total_vectors / total_db_records) * 100
            
            self.stdout.write(f"\nüîç VALIDATION DE COH√âRENCE:")
            self.stdout.write(f"üìö Enregistrements DB: {total_db_records}")
            self.stdout.write(f"üî¢ Vecteurs RAG: {total_vectors}")
            self.stdout.write(f"üìà Ratio de coh√©rence: {coherence_ratio:.1f}%")
            
            # √âvaluation de la coh√©rence
            if coherence_ratio >= 80:
                self.stdout.write(self.style.SUCCESS("‚úÖ Coh√©rence excellente (‚â•80%)"))
            elif coherence_ratio >= 60:
                self.stdout.write(self.style.WARNING("‚ö†Ô∏è Coh√©rence acceptable (‚â•60%)"))
            else:
                self.stdout.write(self.style.ERROR("‚ùå Coh√©rence faible (<60%)"))
                self.stdout.write("üí° Recommandation: V√©rifiez la configuration des mod√®les")
        
        else:
            self.stdout.write(self.style.ERROR("‚ùå Aucun enregistrement trouv√© en base"))
