from django.core.management.base import BaseCommand
from django.db import transaction
from apps.demande_equipement.models import DemandeEquipement, ArchiveDecharge


class Command(BaseCommand):
    help = 'Nettoie les demandes de fournitures qui n\'ont pas de fourniture s√©lectionn√©e'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Affiche ce qui serait supprim√© sans effectuer la suppression',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Force la suppression m√™me si des d√©charges sont sign√©es',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        force = options['force']
        
        # Trouver toutes les demandes de fournitures sans fourniture s√©lectionn√©e
        demandes_orphelines = DemandeEquipement.objects.filter(
            type_article='fourniture',
            fourniture__isnull=True
        )
        
        if not demandes_orphelines.exists():
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Aucune demande de fourniture orpheline trouv√©e.')
            )
            return
        
        self.stdout.write(f'üîç Trouv√© {demandes_orphelines.count()} demande(s) de fourniture orpheline(s):')
        
        # Afficher les d√©tails des demandes
        for demande in demandes_orphelines:
            self.stdout.write(f'  - ID: {demande.id}, Date: {demande.date_demande}, Demandeur: {demande.demandeur.get_full_name()}, Statut: {demande.get_statut_display()}')
            
            # V√©rifier s'il y a des d√©charges sign√©es
            if demande.decharge_signee:
                self.stdout.write(f'    ‚ö†Ô∏è  ATTENTION: D√©charge sign√©e le {demande.date_signature}')
                
                # V√©rifier s'il y a des archives
                try:
                    archive = demande.archive_decharge
                    self.stdout.write(f'    üìö Archive trouv√©e: {archive.numero_archive}')
                except ArchiveDecharge.DoesNotExist:
                    pass
        
        # Demander confirmation si ce n'est pas un dry-run
        if not dry_run:
            if not force:
                self.stdout.write('\n‚ö†Ô∏è  ATTENTION: Cette action va supprimer d√©finitivement les demandes orphelines.')
                self.stdout.write('‚ö†Ô∏è  Si des d√©charges sont sign√©es, elles seront √©galement supprim√©es.')
                
                confirm = input('\n√ätes-vous s√ªr de vouloir continuer ? (oui/non): ')
                if confirm.lower() not in ['oui', 'o', 'yes', 'y']:
                    self.stdout.write('‚ùå Op√©ration annul√©e.')
                    return
            
            # Proc√©der √† la suppression
            with transaction.atomic():
                count_supprimees = 0
                count_archives_supprimees = 0
                
                for demande in demandes_orphelines:
                    # Supprimer l'archive de d√©charge si elle existe
                    try:
                        archive = demande.archive_decharge
                        archive.delete()
                        count_archives_supprimees += 1
                        self.stdout.write(f'  üóëÔ∏è  Archive supprim√©e: {archive.numero_archive}')
                    except ArchiveDecharge.DoesNotExist:
                        pass
                    
                    # Supprimer la demande
                    demande.delete()
                    count_supprimees += 1
                    self.stdout.write(f'  üóëÔ∏è  Demande supprim√©e: ID {demande.id}')
                
                self.stdout.write(
                    self.style.SUCCESS(
                        f'\n‚úÖ Nettoyage termin√© !\n'
                        f'   - {count_supprimees} demande(s) supprim√©e(s)\n'
                        f'   - {count_archives_supprimees} archive(s) supprim√©e(s)'
                    )
                )
        else:
            self.stdout.write(
                self.style.WARNING(
                    f'\nüîç DRY RUN - Aucune suppression effectu√©e.\n'
                    f'   - {demandes_orphelines.count()} demande(s) seraient supprim√©e(s)\n'
                    f'   - Utilisez --force pour effectuer la suppression r√©elle'
                )
            )
