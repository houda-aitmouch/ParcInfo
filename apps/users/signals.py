from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils import timezone
from .models import NotificationDemande

@receiver(post_save, sender='demande_equipement.DemandeEquipement')
def creer_notification_demande(sender, instance, created, **kwargs):
    """
    Cr√©e une notification automatique pour les employ√©s quand le statut d'une demande change
    """
    if not created:  # Seulement si c'est une mise √† jour
        try:
            # V√©rifier si le statut a chang√©
            if hasattr(instance, '_statut_changed') and instance._statut_changed:
                
                # V√âRIFIER QUE LE DEMANDEUR EST UN EMPLOY√â (pas un admin/gestionnaire)
                demandeur = instance.demandeur
                if demandeur.is_superuser or demandeur.groups.filter(name__in=['Super Admin', 'Gestionnaire Informatique', 'Gestionnaire Bureau']).exists():
                    # Ne pas cr√©er de notification pour les administrateurs/gestionnaires
                    return
                
                # Construire le titre avec plus d'informations contextuelles
                titre = f"Demande D{instance.id:03d} - {instance.get_statut_display()}"
                
                # Construire un message d√©taill√© avec les informations de la demande
                def get_demande_details():
                    """Retourne les d√©tails de la demande pour le message"""
                    details = []
                    
                    # Type d'article
                    if instance.type_article == 'materiel':
                        details.append("mat√©riel")
                        if instance.categorie == 'informatique':
                            details.append("informatique")
                        elif instance.categorie == 'bureau':
                            details.append("de bureau")
                    elif instance.type_article == 'fourniture':
                        details.append("fourniture")
                        if instance.fourniture:
                            details.append(f"'{instance.fourniture.nom}'")
                    
                    # D√©signation pour les mat√©riels
                    if instance.type_article == 'materiel' and instance.designation:
                        details.append(f"({instance.designation.nom})")
                    
                    # Type de demande
                    if instance.type_demande != 'nouveau':
                        details.append(f"- {instance.get_type_demande_display().lower()}")
                    
                    return " ".join(details)
                
                demande_details = get_demande_details()
                
                # Messages personnalis√©s selon le statut - plus d√©taill√©s pour les employ√©s
                messages = {
                    'en_attente': f"Votre demande de {demande_details} est en attente de validation par la hi√©rarchie.",
                    'approuvee': f"üéâ Votre demande de {demande_details} a √©t√© approuv√©e ! Veuillez signer la d√©charge pour recevoir l'√©quipement.",
                    'rejetee': f"‚ùå Votre demande de {demande_details} a √©t√© rejet√©e. Contactez votre responsable pour plus de d√©tails.",
                    'en_cours': f"üîÑ Votre demande de {demande_details} est en cours de traitement. Nous vous tiendrons inform√©.",
                    'terminee': f"‚úÖ Votre demande de {demande_details} a √©t√© trait√©e avec succ√®s. L'√©quipement est disponible.",
                    'en_attente_signature': f"‚úçÔ∏è Votre demande de {demande_details} n√©cessite votre signature pour validation.",
                    'signature_requise': f"‚úçÔ∏è Signature requise pour votre demande de {demande_details}. Veuillez la signer rapidement.",
                }
                
                message = messages.get(instance.statut, f"Le statut de votre demande de {demande_details} a chang√©.")
                
                # Cr√©er la notification
                NotificationDemande.objects.create(
                    utilisateur=instance.demandeur,
                    type_notification='demande_equipement',
                    titre=titre,
                    message=message,
                    statut_demande=instance.statut,
                    demande_id=instance.id
                )
                
                # Nettoyer les attributs temporaires
                if hasattr(instance, '_statut_changed'):
                    delattr(instance, '_statut_changed')
                if hasattr(instance, '_old_statut'):
                    delattr(instance, '_old_statut')
                
        except Exception as e:
            # Logger l'erreur mais ne pas faire √©chouer le signal
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"Erreur lors de la cr√©ation de la notification: {e}")

# Signal pour les demandes n√©cessitant une signature
@receiver(post_save, sender='demande_equipement.DemandeEquipement')
def creer_notification_signature(sender, instance, created, **kwargs):
    """
    Cr√©e une notification sp√©ciale UNIQUEMENT pour les employ√©s quand une demande n√©cessite une signature
    """
    if not created:
        try:
            # V√©rifier si la demande n√©cessite une signature
            if hasattr(instance, 'signature_requise') and instance.signature_requise:
                
                # V√âRIFIER QUE LE DEMANDEUR EST UN EMPLOY√â (pas un admin/gestionnaire)
                demandeur = instance.demandeur
                if demandeur.is_superuser or demandeur.groups.filter(name__in=['Super Admin', 'Gestionnaire Informatique', 'Gestionnaire Bureau']).exists():
                    # Ne pas cr√©er de notification pour les administrateurs/gestionnaires
                    return
                
                # V√©rifier si on n'a pas d√©j√† cr√©√© une notification pour ce statut
                if not NotificationDemande.objects.filter(
                    utilisateur=instance.demandeur,
                    demande_id=instance.id,
                    statut_demande='signature_requise'
                ).exists():
                    
                    # Construire les d√©tails de la demande
                    def get_demande_details():
                        """Retourne les d√©tails de la demande pour le message"""
                        details = []
                        
                        # Type d'article
                        if instance.type_article == 'materiel':
                            details.append("mat√©riel")
                            if instance.categorie == 'informatique':
                                details.append("informatique")
                            elif instance.categorie == 'bureau':
                                details.append("de bureau")
                        elif instance.type_article == 'fourniture':
                            details.append("fourniture")
                            if instance.fourniture:
                                details.append(f"'{instance.fourniture.nom}'")
                        
                        # D√©signation pour les mat√©riels
                        if instance.type_article == 'materiel' and instance.designation:
                            details.append(f"({instance.designation.nom})")
                        
                        # Type de demande
                        if instance.type_demande != 'nouveau':
                            details.append(f"- {instance.get_type_demande_display().lower()}")
                        
                        return " ".join(details)
                    
                    demande_details = get_demande_details()
                    
                    titre = f"‚úçÔ∏è Signature requise - Demande D{instance.id:03d}"
                    message = f"Votre demande de {demande_details} n√©cessite votre signature pour √™tre trait√©e. Veuillez la signer rapidement."
                    
                    NotificationDemande.objects.create(
                        utilisateur=instance.demandeur,
                        type_notification='demande_equipement',
                        titre=titre,
                        message=message,
                        statut_demande='signature_requise',
                        demande_id=instance.id
                    )
                    
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"Erreur lors de la cr√©ation de la notification de signature: {e}")

# Suppression des notifications pour les commandes - les employ√©s ne doivent recevoir que des notifications pour leurs demandes
