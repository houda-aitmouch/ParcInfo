#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
G√©n√©rateur de Diagramme de Workflow ParcInfo
============================================

Ce script g√©n√®re un diagramme de workflow visuel pour le syst√®me ParcInfo
bas√© sur le workflow manuel document√©.

Auteur: √âquipe ParcInfo
Date: 2025-01-15
"""

from graphviz import Digraph
import os
import sys

def create_workflow_diagram():
    """Cr√©e le diagramme de workflow ParcInfo complet."""
    
    # Cr√©ation du graphe principal
    dot = Digraph('Workflow_ParcInfo_Complet', format='png')
    dot.attr(rankdir='TB', size='16,12', dpi='300')
    dot.attr('node', fontname='Arial', fontsize='10')
    dot.attr('edge', fontname='Arial', fontsize='9')
    
    # D√©finition des couleurs par r√¥le
    roles_colors = {
        'Employ√©': '#E3F2FD',           # Bleu clair
        'Secr√©taire': '#F3E5F5',        # Violet clair
        'Gestionnaire_Info': '#E8F5E8',  # Vert clair
        'Gestionnaire_Bureau': '#FFF3E0', # Orange clair
        'SuperAdmin': '#F1F8E9',        # Vert tr√®s clair
        'Syst√®me': '#FFEBEE',           # Rouge tr√®s clair
        'D√©cision': '#FFFFFF',          # Blanc pour les d√©cisions
        'D√©but_Fin': '#E0E0E0'          # Gris pour d√©but/fin
    }
    
    # Styles des n≈ìuds
    node_styles = {
        'process': {'shape': 'box', 'style': 'filled,rounded'},
        'decision': {'shape': 'diamond', 'style': 'filled'},
        'start_end': {'shape': 'circle', 'style': 'filled'},
        'document': {'shape': 'note', 'style': 'filled'}
    }
    
    # === N≈íUDS DE D√âBUT ET FIN ===
    dot.node('Start', 'D√âBUT\nDemande d\'√©quipement', 
             **node_styles['start_end'], fillcolor=roles_colors['D√©but_Fin'])
    dot.node('End_Approuve', 'FIN\nDemande approuv√©e', 
             **node_styles['start_end'], fillcolor=roles_colors['D√©but_Fin'])
    dot.node('End_Refuse', 'FIN\nDemande refus√©e', 
             **node_styles['start_end'], fillcolor=roles_colors['D√©but_Fin'])
    
    # === WORKFLOW 1: DEMANDE D'√âQUIPEMENT ===
    
    # √âtape 1: Cr√©ation de la demande
    dot.node('Demande', '1. Cr√©er demande d\'√©quipement\n(Formulaire papier)', 
             **node_styles['process'], fillcolor=roles_colors['Employ√©'])
    
    # √âtape 2: Enregistrement
    dot.node('Enregistrement', '2. Enregistrement et classement\n(Num√©ro D-YYYY-XXX)', 
             **node_styles['process'], fillcolor=roles_colors['Secr√©taire'])
    
    # √âtape 3: V√©rification stock
    dot.node('Stock', '3. V√©rifier stock disponible\n(Registre d\'inventaire)', 
             **node_styles['process'], fillcolor=roles_colors['Gestionnaire_Info'])
    
    # D√©cision stock
    dot.node('StockCheck', 'Stock suffisant ?', 
             **node_styles['decision'], fillcolor=roles_colors['D√©cision'])
    
    # √âtape 4: Analyse
    dot.node('Analyse', '4. Analyser demande\n(Budget + justification)', 
             **node_styles['process'], fillcolor=roles_colors['Gestionnaire_Info'])
    
    # D√©cision approbation
    dot.node('Approval', 'Demande approuv√©e ?', 
             **node_styles['decision'], fillcolor=roles_colors['D√©cision'])
    
    # Notification refus
    dot.node('Notification_Refus', '5. Notification de refus\n(Courrier interne)', 
             **node_styles['process'], fillcolor=roles_colors['Secr√©taire'])
    
    # === WORKFLOW 2: AFFECTATION MAT√âRIEL ===
    
    # Pr√©paration mat√©riel
    dot.node('Preparation', '6. Pr√©parer mat√©riel\n(S√©lection + d√©charge)', 
             **node_styles['process'], fillcolor=roles_colors['Gestionnaire_Info'])
    
    # Affectation
    dot.node('Affectation', '7. Affecter mat√©riel\n(Mise √† jour registre)', 
             **node_styles['process'], fillcolor=roles_colors['Gestionnaire_Info'])
    
    # Remise mat√©riel
    dot.node('Remise', '8. Remise mat√©riel\n(Signature d√©charge)', 
             **node_styles['process'], fillcolor=roles_colors['Employ√©'])
    
    # === WORKFLOW 3: GESTION COMMANDES ===
    
    # Identification besoin
    dot.node('Besoin', '9. Identifier besoin de commande\n(Analyse demandes)', 
             **node_styles['process'], fillcolor=roles_colors['Gestionnaire_Info'])
    
    # Validation commande
    dot.node('Validation_Commande', '10. Validation et cr√©ation\n(Bon de commande)', 
             **node_styles['process'], fillcolor=roles_colors['SuperAdmin'])
    
    # Transmission fournisseur
    dot.node('Transmission', '11. Transmission fournisseur\n(Courrier/Fax)', 
             **node_styles['process'], fillcolor=roles_colors['SuperAdmin'])
    
    # Suivi commande
    dot.node('Suivi', '12. Suivi de commande\n(Tableau de suivi)', 
             **node_styles['process'], fillcolor=roles_colors['Secr√©taire'])
    
    # === WORKFLOW 4: R√âCEPTION ET CONTR√îLE ===
    
    # R√©ception physique
    dot.node('Reception', '13. R√©ception physique\n(Contr√¥le livraison)', 
             **node_styles['process'], fillcolor=roles_colors['Gestionnaire_Info'])
    
    # Contr√¥le qualit√©
    dot.node('Controle', '14. Contr√¥le qualit√©\n(Visuel + fonctionnel)', 
             **node_styles['process'], fillcolor=roles_colors['Gestionnaire_Info'])
    
    # D√©cision conformit√©
    dot.node('Conforme', 'Livraison conforme ?', 
             **node_styles['decision'], fillcolor=roles_colors['D√©cision'])
    
    # Correction non-conformit√©
    dot.node('Correction', '15. Notifier correction\n(Rapport non-conformit√©)', 
             **node_styles['process'], fillcolor=roles_colors['Syst√®me'])
    
    # Proc√®s-verbal
    dot.node('PV', '16. Proc√®s-verbal r√©ception\n(Signature validation)', 
             **node_styles['process'], fillcolor=roles_colors['SuperAdmin'])
    
    # Mise en stock
    dot.node('MiseStock', '17. Mise en stock\n(Num√©ro inventaire)', 
             **node_styles['process'], fillcolor=roles_colors['Gestionnaire_Info'])
    
    # === WORKFLOW 5: NOTIFICATIONS ET ARCHIVAGE ===
    
    # Notification acteurs
    dot.node('Notification_Acteurs', '18. Notifier acteurs\n(Courrier interne)', 
             **node_styles['process'], fillcolor=roles_colors['Secr√©taire'])
    
    # Archivage
    dot.node('Archivage', '19. Archivage documents\n(Classement s√©curis√©)', 
             **node_styles['process'], fillcolor=roles_colors['Secr√©taire'])
    
    # === CONNEXIONS PRINCIPALES ===
    
    # Workflow principal
    dot.edge('Start', 'Demande')
    dot.edge('Demande', 'Enregistrement')
    dot.edge('Enregistrement', 'Stock')
    dot.edge('Stock', 'StockCheck')
    dot.edge('StockCheck', 'Analyse', label='Oui')
    dot.edge('StockCheck', 'Besoin', label='Non')
    dot.edge('Analyse', 'Approval')
    dot.edge('Approval', 'Preparation', label='Oui')
    dot.edge('Approval', 'Notification_Refus', label='Non')
    dot.edge('Notification_Refus', 'End_Refuse')
    dot.edge('Preparation', 'Affectation')
    dot.edge('Affectation', 'Remise')
    dot.edge('Remise', 'End_Approuve')
    
    # Workflow commandes
    dot.edge('Besoin', 'Validation_Commande')
    dot.edge('Validation_Commande', 'Transmission')
    dot.edge('Transmission', 'Suivi')
    dot.edge('Suivi', 'Reception')
    dot.edge('Reception', 'Controle')
    dot.edge('Controle', 'Conforme')
    dot.edge('Conforme', 'PV', label='Oui')
    dot.edge('Conforme', 'Correction', label='Non')
    dot.edge('Correction', 'Suivi')
    dot.edge('PV', 'MiseStock')
    dot.edge('MiseStock', 'Notification_Acteurs')
    dot.edge('Notification_Acteurs', 'Archivage')
    dot.edge('Archivage', 'End_Approuve')
    
    return dot

def create_roles_diagram():
    """Cr√©e un diagramme des r√¥les et responsabilit√©s."""
    
    dot = Digraph('Roles_ParcInfo', format='png')
    dot.attr(rankdir='LR', size='14,10', dpi='300')
    dot.attr('node', fontname='Arial', fontsize='11', shape='box', style='filled,rounded')
    
    # Couleurs par r√¥le
    colors = {
        'Employ√©': '#E3F2FD',
        'Secr√©taire': '#F3E5F5', 
        'Gestionnaire_Info': '#E8F5E8',
        'Gestionnaire_Bureau': '#FFF3E0',
        'SuperAdmin': '#F1F8E9'
    }
    
    # R√¥les principaux
    dot.node('Employe', 'üë§ EMPLOY√â\n‚Ä¢ Cr√©er demandes\n‚Ä¢ Signer d√©charges\n‚Ä¢ R√©ceptionner mat√©riel', 
             fillcolor=colors['Employ√©'])
    
    dot.node('Secretaire', 'üìã SECR√âTAIRE\n‚Ä¢ Enregistrer demandes\n‚Ä¢ Notifications\n‚Ä¢ Archivage', 
             fillcolor=colors['Secr√©taire'])
    
    dot.node('GestInfo', 'üíª GESTIONNAIRE INFO\n‚Ä¢ Traiter demandes info\n‚Ä¢ G√©rer stock info\n‚Ä¢ Commandes info', 
             fillcolor=colors['Gestionnaire_Info'])
    
    dot.node('GestBureau', 'üìÅ GESTIONNAIRE BUREAU\n‚Ä¢ Traiter demandes bureau\n‚Ä¢ G√©rer stock bureau\n‚Ä¢ Commandes bureau', 
             fillcolor=colors['Gestionnaire_Bureau'])
    
    dot.node('SuperAdmin', 'üîß SUPER ADMIN\n‚Ä¢ Validation commandes\n‚Ä¢ Gestion fournisseurs\n‚Ä¢ Supervision g√©n√©rale', 
             fillcolor=colors['SuperAdmin'])
    
    # Connexions hi√©rarchiques
    dot.edge('Employe', 'Secretaire')
    dot.edge('Secretaire', 'GestInfo')
    dot.edge('Secretaire', 'GestBureau')
    dot.edge('GestInfo', 'SuperAdmin')
    dot.edge('GestBureau', 'SuperAdmin')
    
    return dot

def main():
    """Fonction principale."""
    
    print("üîÑ G√©n√©ration des diagrammes ParcInfo...")
    
    # V√©rifier si Graphviz est install√©
    try:
        from graphviz import Digraph
    except ImportError:
        print("‚ùå Erreur: Graphviz n'est pas install√©.")
        print("üì¶ Installation: pip install graphviz")
        print("üíª Assurez-vous aussi que Graphviz est install√© sur votre syst√®me:")
        print("   - macOS: brew install graphviz")
        print("   - Ubuntu: sudo apt-get install graphviz")
        print("   - Windows: t√©l√©charger depuis https://graphviz.org/")
        return
    
    # Cr√©er le r√©pertoire de sortie
    output_dir = 'diagrammes_generes'
    os.makedirs(output_dir, exist_ok=True)
    
    try:
        # G√©n√©rer le workflow principal
        print("üìä G√©n√©ration du workflow principal...")
        workflow_dot = create_workflow_diagram()
        workflow_file = os.path.join(output_dir, 'workflow_parcinfo_complet')
        workflow_dot.render(workflow_file, view=False, cleanup=True)
        print(f"‚úÖ Workflow principal g√©n√©r√©: {workflow_file}.png")
        
        # G√©n√©rer le diagramme des r√¥les
        print("üë• G√©n√©ration du diagramme des r√¥les...")
        roles_dot = create_roles_diagram()
        roles_file = os.path.join(output_dir, 'roles_parcinfo')
        roles_dot.render(roles_file, view=False, cleanup=True)
        print(f"‚úÖ Diagramme des r√¥les g√©n√©r√©: {roles_file}.png")
        
        print("\nüéâ G√©n√©ration termin√©e avec succ√®s!")
        print(f"üìÅ Fichiers g√©n√©r√©s dans: {output_dir}/")
        print("üìã Fichiers cr√©√©s:")
        print(f"   - {workflow_file}.png (Workflow complet)")
        print(f"   - {roles_file}.png (R√¥les et responsabilit√©s)")
        
        # Ouvrir les fichiers g√©n√©r√©s
        if sys.platform == "darwin":  # macOS
            os.system(f"open {workflow_file}.png")
            os.system(f"open {roles_file}.png")
        elif sys.platform == "win32":  # Windows
            os.system(f"start {workflow_file}.png")
            os.system(f"start {roles_file}.png")
        else:  # Linux
            os.system(f"xdg-open {workflow_file}.png")
            os.system(f"xdg-open {roles_file}.png")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
        print("üí° V√©rifiez que Graphviz est correctement install√© sur votre syst√®me.")

if __name__ == "__main__":
    main()
