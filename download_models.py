#!/usr/bin/env python3
"""
Script pour t√©l√©charger les mod√®les Hugging Face avec gestion des timeouts
et retry logic robuste.
"""

import os
import sys
import time
import logging
from pathlib import Path
from typing import Optional

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def setup_huggingface_config():
    """Configure les param√®tres Hugging Face pour √©viter les timeouts"""
    os.environ['HF_HUB_DOWNLOAD_TIMEOUT'] = '1800'  # 30 minutes
    os.environ['HF_HUB_DOWNLOAD_RETRY_DELAY'] = '10'  # 10 secondes entre les tentatives
    os.environ['HF_HUB_DOWNLOAD_RETRIES'] = '5'  # 5 tentatives
    os.environ['HF_HUB_DOWNLOAD_BACKOFF_FACTOR'] = '2'  # Facteur d'exponentiation
    os.environ['HF_HUB_DISABLE_TELEMETRY'] = '1'
    
    # Configuration des caches
    cache_dir = Path.home() / '.cache' / 'huggingface'
    cache_dir.mkdir(parents=True, exist_ok=True)
    os.environ['HF_HOME'] = str(cache_dir)
    os.environ['TRANSFORMERS_CACHE'] = str(cache_dir)
    os.environ['SENTENCE_TRANSFORMERS_HOME'] = str(cache_dir)

def download_model_with_retry(model_name: str, max_attempts: int = 5) -> bool:
    """
    T√©l√©charge un mod√®le avec retry logic robuste
    
    Args:
        model_name: Nom du mod√®le √† t√©l√©charger
        max_attempts: Nombre maximum de tentatives
        
    Returns:
        bool: True si le t√©l√©chargement a r√©ussi, False sinon
    """
    try:
        from sentence_transformers import SentenceTransformer
    except ImportError as e:
        logger.error(f"Impossible d'importer sentence_transformers: {e}")
        return False
    except Exception as e:
        logger.error(f"Erreur lors de l'import de sentence_transformers: {e}")
        return False
    
    for attempt in range(max_attempts):
        try:
            logger.info(f"Tentative {attempt + 1}/{max_attempts} pour t√©l√©charger {model_name}")
            
            # T√©l√©chargement avec timeout personnalis√©
            model = SentenceTransformer(model_name)
            
            # Test du mod√®le
            test_text = "Test du mod√®le"
            embeddings = model.encode(test_text)
            logger.info(f"Mod√®le {model_name} t√©l√©charg√© et test√© avec succ√®s!")
            return True
            
        except Exception as e:
            logger.warning(f"Tentative {attempt + 1} √©chou√©e: {str(e)}")
            
            if attempt < max_attempts - 1:
                wait_time = 2 ** attempt * 10  # Attente exponentielle: 10s, 20s, 40s, 80s
                logger.info(f"Attente de {wait_time} secondes avant la prochaine tentative...")
                time.sleep(wait_time)
            else:
                logger.error(f"Toutes les tentatives ont √©chou√© pour {model_name}")
                return False
    
    return False

def download_bart_model_with_retry(max_attempts: int = 3) -> bool:
    """
    T√©l√©charge le mod√®le BART avec retry logic robuste
    
    Args:
        max_attempts: Nombre maximum de tentatives
        
    Returns:
        bool: True si le t√©l√©chargement a r√©ussi, False sinon
    """
    try:
        from transformers import pipeline
    except ImportError as e:
        logger.error(f"Impossible d'importer transformers: {e}")
        return False
    except Exception as e:
        logger.error(f"Erreur lors de l'import de transformers: {e}")
        return False
    
    for attempt in range(max_attempts):
        try:
            logger.info(f"Tentative {attempt + 1}/{max_attempts} pour t√©l√©charger BART...")
            
            # T√©l√©chargement du mod√®le BART
            model = pipeline(
                "zero-shot-classification", 
                model="facebook/bart-large-mnli",
                device=-1  # CPU only
            )
            
            # Test du mod√®le
            test_result = model("This is a test", ["positive", "negative"])
            logger.info(f"Mod√®le BART t√©l√©charg√© et test√© avec succ√®s!")
            return True
            
        except Exception as e:
            logger.warning(f"Tentative {attempt + 1} √©chou√©e: {str(e)}")
            
            if attempt < max_attempts - 1:
                wait_time = 2 ** attempt * 15  # Attente exponentielle: 15s, 30s, 60s
                logger.info(f"Attente de {wait_time} secondes avant la prochaine tentative...")
                time.sleep(wait_time)
            else:
                logger.error(f"Toutes les tentatives ont √©chou√© pour BART")
                return False
    
    return False

def main():
    """Fonction principale"""
    logger.info("D√©marrage du t√©l√©chargement des mod√®les...")
    
    # Configuration
    setup_huggingface_config()
    
    # Mod√®les √† t√©l√©charger
    models = [
        'sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2',
        # Ajoutez d'autres mod√®les si n√©cessaire
    ]
    
    success_count = 0
    total_models = len(models)
    
    # T√©l√©charger les mod√®les sentence-transformers
    for model_name in models:
        logger.info(f"T√©l√©chargement de {model_name}...")
        
        if download_model_with_retry(model_name):
            success_count += 1
            logger.info(f"‚úÖ {model_name} t√©l√©charg√© avec succ√®s")
        else:
            logger.error(f"‚ùå √âchec du t√©l√©chargement de {model_name}")
    
    # T√©l√©charger le mod√®le BART s√©par√©ment
    logger.info("T√©l√©chargement du mod√®le BART...")
    if download_bart_model_with_retry():
        logger.info("‚úÖ Mod√®le BART t√©l√©charg√© avec succ√®s")
    else:
        logger.warning("‚ö†Ô∏è √âchec du t√©l√©chargement du mod√®le BART")
    
    logger.info(f"R√©sum√©: {success_count}/{total_models} mod√®les sentence-transformers t√©l√©charg√©s avec succ√®s")
    
    if success_count == total_models:
        logger.info("üéâ Tous les mod√®les ont √©t√© t√©l√©charg√©s avec succ√®s!")
        return 0
    else:
        logger.warning("‚ö†Ô∏è Certains mod√®les n'ont pas pu √™tre t√©l√©charg√©s")
        return 1

if __name__ == "__main__":
    sys.exit(main())
