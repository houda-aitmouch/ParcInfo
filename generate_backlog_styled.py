#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
G√©n√©rateur de Backlog Produit Styl√© - ParcInfo
Cr√©e un backlog produit structur√© avec style professionnel
"""

import pandas as pd
from datetime import datetime
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment, Color
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.worksheet.dimensions import ColumnDimension, DimensionHolder
from openpyxl.worksheet.worksheet import Worksheet

def apply_styles_to_worksheet(ws, title="Backlog Produit"):
    """Applique des styles professionnels √† la feuille de calcul"""
    
    # Styles de base
    header_font = Font(name='Arial', size=11, bold=True, color='FFFFFF')
    header_fill = PatternFill(start_color='366092', end_color='366092', fill_type='solid')
    border = Border(
        left=Side(style='thin'),
        right=Side(style='thin'),
        top=Side(style='thin'),
        bottom=Side(style='thin')
    )
    
    # Titre principal
    ws['A1'] = f"üìã {title} - ParcInfo"
    ws['A1'].font = Font(name='Arial', size=16, bold=True, color='366092')
    ws.merge_cells('A1:L1')
    ws['A1'].alignment = Alignment(horizontal='center', vertical='center')
    
    # Sous-titre avec date
    ws['A2'] = f"G√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}"
    ws['A2'].font = Font(name='Arial', size=10, italic=True, color='666666')
    ws.merge_cells('A2:L2')
    ws['A2'].alignment = Alignment(horizontal='center')
    
    # En-t√™tes de colonnes
    headers = ['Prio', 'EPIC', 'Feature', 'Persona', 'Macro US', 'RG', 'US', 'D√©pendance', 'Statut', 'Commentaire', 'Feature Link', 'US Link']
    
    for col, header in enumerate(headers, 1):
        cell = ws.cell(row=4, column=col, value=header)
        cell.font = header_font
        cell.fill = header_fill
        cell.border = border
        cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
    
    # Ajuster la largeur des colonnes
    column_widths = {
        'A': 8,   # Prio
        'B': 20,  # EPIC
        'C': 25,  # Feature
        'D': 15,  # Persona
        'E': 40,  # Macro US
        'F': 20,  # RG
        'G': 25,  # US
        'H': 15,  # D√©pendance
        'I': 12,  # Statut
        'J': 30,  # Commentaire
        'K': 20,  # Feature Link
        'L': 20   # US Link
    }
    
    for col, width in column_widths.items():
        ws.column_dimensions[col].width = width
    
    # Hauteur de ligne pour les en-t√™tes
    ws.row_dimensions[4].height = 30
    
    return ws

def apply_priority_colors(ws, start_row=5):
    """Applique des couleurs selon la priorit√©"""
    
    # Couleurs par priorit√©
    priority_colors = {
        'P1': PatternFill(start_color='FFE6E6', end_color='FFE6E6', fill_type='solid'),  # Rouge clair
        'P2': PatternFill(start_color='FFF2CC', end_color='FFF2CC', fill_type='solid'),  # Jaune clair
        'P3': PatternFill(start_color='E6F3FF', end_color='E6F3FF', fill_type='solid')   # Bleu clair
    }
    
    # Couleurs par statut
    status_colors = {
        'Termin√©': PatternFill(start_color='D4EDDA', end_color='D4EDDA', fill_type='solid'),  # Vert
        'En cours': PatternFill(start_color='FFF3CD', end_color='FFF3CD', fill_type='solid'),  # Jaune
        '√Ä faire': PatternFill(start_color='F8D7DA', end_color='F8D7DA', fill_type='solid')    # Rouge
    }
    
    border = Border(
        left=Side(style='thin'),
        right=Side(style='thin'),
        top=Side(style='thin'),
        bottom=Side(style='thin')
    )
    
    for row in range(start_row, ws.max_row + 1):
        for col in range(1, 13):
            cell = ws.cell(row=row, column=col)
            cell.border = border
            cell.alignment = Alignment(vertical='top', wrap_text=True)
            
            # Couleur de priorit√© pour la premi√®re colonne
            if col == 1 and cell.value in priority_colors:
                cell.fill = priority_colors[cell.value]
                cell.font = Font(bold=True)
            
            # Couleur de statut pour la colonne statut
            if col == 9 and cell.value in status_colors:
                cell.fill = status_colors[cell.value]
                cell.font = Font(bold=True)

def create_personas_sheet(wb):
    """Cr√©e la feuille des personas avec style"""
    ws = wb.create_sheet("Personas")
    
    # Titre
    ws['A1'] = "üë• Personas - ParcInfo"
    ws['A1'].font = Font(name='Arial', size=16, bold=True, color='366092')
    ws.merge_cells('A1:E1')
    ws['A1'].alignment = Alignment(horizontal='center')
    
    # En-t√™tes
    headers = ['Persona', 'R√¥le', 'Responsabilit√©s', 'Acc√®s', 'Permissions']
    for col, header in enumerate(headers, 1):
        cell = ws.cell(row=3, column=col, value=header)
        cell.font = Font(name='Arial', size=11, bold=True, color='FFFFFF')
        cell.fill = PatternFill(start_color='366092', end_color='366092', fill_type='solid')
        cell.border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
    
    # Donn√©es des personas
    personas_data = [
        ['Employ√©', 'Utilisateur final du syst√®me', 'Cr√©er des demandes, signer des d√©charges, consulter ses √©quipements', 'Dashboard employ√©, demandes personnelles, notifications', 'Lecture sur ses donn√©es, √©criture sur ses demandes'],
        ['Gestionnaire Info', 'Gestionnaire du parc informatique', 'Approuver demandes IT, g√©rer mat√©riel informatique, suivre commandes IT', 'Dashboard gestionnaire info, mat√©riel informatique, commandes IT', 'Lecture/√©criture sur mat√©riel IT, approbation demandes IT'],
        ['Gestionnaire Bureau', 'Gestionnaire du mobilier et fournitures de bureau', 'Approuver demandes bureau, g√©rer mobilier, suivre commandes bureau', 'Dashboard gestionnaire bureau, mat√©riel bureau, commandes bureau', 'Lecture/√©criture sur mat√©riel bureau, approbation demandes bureau'],
        ['Super Admin', 'Administrateur syst√®me', 'Gestion compl√®te du syst√®me, utilisateurs, fournisseurs', 'Toutes les fonctionnalit√©s, configuration syst√®me', 'Acc√®s complet √† toutes les fonctionnalit√©s']
    ]
    
    for row_idx, persona in enumerate(personas_data, 4):
        for col_idx, value in enumerate(persona, 1):
            cell = ws.cell(row=row_idx, column=col_idx, value=value)
            cell.border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )
            cell.alignment = Alignment(vertical='top', wrap_text=True)
    
    # Largeur des colonnes
    ws.column_dimensions['A'].width = 20
    ws.column_dimensions['B'].width = 25
    ws.column_dimensions['C'].width = 40
    ws.column_dimensions['D'].width = 35
    ws.column_dimensions['E'].width = 35

def create_epics_sheet(wb):
    """Cr√©e la feuille des EPICs avec style"""
    ws = wb.create_sheet("EPICs")
    
    # Titre
    ws['A1'] = "üìã EPICs - ParcInfo"
    ws['A1'].font = Font(name='Arial', size=16, bold=True, color='366092')
    ws.merge_cells('A1:C1')
    ws['A1'].alignment = Alignment(horizontal='center')
    
    # En-t√™tes
    headers = ['EPIC', 'Description', 'Responsable']
    for col, header in enumerate(headers, 1):
        cell = ws.cell(row=3, column=col, value=header)
        cell.font = Font(name='Arial', size=11, bold=True, color='FFFFFF')
        cell.fill = PatternFill(start_color='366092', end_color='366092', fill_type='solid')
        cell.border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
    
    # Donn√©es des EPICs
    epics_data = [
        ['Authentification', 'Gestion des connexions et sessions utilisateurs', 'Super Admin'],
        ['Gestion Utilisateurs', 'Gestion des profils et r√¥les utilisateurs', 'Super Admin'],
        ['Demandes √âquipement', 'Workflow de demandes d\'√©quipement', 'Gestionnaire Info/Bureau'],
        ['Mat√©riel Informatique', 'Gestion du parc informatique', 'Gestionnaire Info'],
        ['Mat√©riel Bureau', 'Gestion du mobilier et fournitures', 'Gestionnaire Bureau'],
        ['Commandes Informatiques', 'Gestion des commandes informatiques', 'Gestionnaire Info'],
        ['Commandes Bureau', 'Gestion des commandes bureau', 'Gestionnaire Bureau'],
        ['Fournisseurs', 'Gestion des fournisseurs et catalogues', 'Super Admin'],
        ['Livraisons', 'Suivi des livraisons et r√©ceptions', 'Gestionnaire Info'],
        ['Notifications', 'Syst√®me de notifications et alertes', 'Super Admin'],
        ['Dashboard', 'Tableaux de bord personnalis√©s', 'Super Admin'],
        ['Chatbot', 'Assistant IA et base de connaissances', 'Super Admin'],
        ['Rapports', 'G√©n√©ration de rapports et exports', 'Gestionnaire Info'],
        ['Recherche', 'Recherche globale et filtres', 'Super Admin'],
        ['Garanties', 'Suivi des garanties et alertes', 'Gestionnaire Info'],
        ['Archives', 'Archivage √©lectronique s√©curis√©', 'Super Admin'],
        ['API', 'API REST pour int√©grations', 'Super Admin'],
        ['S√©curit√©', 'Audit et s√©curit√© du syst√®me', 'Super Admin'],
        ['Mobile', 'Application mobile et PWA', 'Super Admin'],
        ['Int√©gration', 'Int√©grations avec syst√®mes externes', 'Super Admin'],
        ['BI', 'Business Intelligence et analytics', 'Super Admin']
    ]
    
    for row_idx, epic in enumerate(epics_data, 4):
        for col_idx, value in enumerate(epic, 1):
            cell = ws.cell(row=row_idx, column=col_idx, value=value)
            cell.border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )
            cell.alignment = Alignment(vertical='top', wrap_text=True)
    
    # Largeur des colonnes
    ws.column_dimensions['A'].width = 25
    ws.column_dimensions['B'].width = 40
    ws.column_dimensions['C'].width = 20

def generate_styled_backlog():
    """G√©n√®re le backlog produit avec style professionnel"""
    
    # Donn√©es du backlog (version simplifi√©e pour l'exemple)
    backlog_data = [
        {'Prio': 'P1', 'EPIC': 'Authentification', 'Feature': 'Interface de connexion', 'Persona': 'Employ√©', 'Macro US': 'En tant qu\'utilisateur, je veux me connecter au syst√®me', 'RG': 'RG-AUTH-001: Champs identifiant et mot de passe obligatoires', 'US': 'US-AUTH-001: Saisir mon identifiant et mot de passe', 'D√©pendance': '-', 'Statut': 'Termin√©', 'Commentaire': 'Interface responsive et s√©curis√©e', 'Feature Link': '/users/login/', 'US Link': '/users/login/'},
        {'Prio': 'P1', 'EPIC': 'Demandes √âquipement', 'Feature': 'Cr√©ation de demande', 'Persona': 'Employ√©', 'Macro US': 'En tant qu\'employ√©, je veux cr√©er une demande d\'√©quipement', 'RG': 'RG-DEM-001: Champs obligatoires selon le type', 'US': 'US-DEM-001: Remplir le formulaire de demande', 'D√©pendance': 'Authentification', 'Statut': 'Termin√©', 'Commentaire': 'Formulaire dynamique selon cat√©gorie', 'Feature Link': '/demande_equipement/nouvelle/', 'US Link': '/demande_equipement/nouvelle/'},
        {'Prio': 'P1', 'EPIC': 'Mat√©riel Informatique', 'Feature': 'Gestion du parc', 'Persona': 'Gestionnaire Info', 'Macro US': 'En tant que gestionnaire, je veux g√©rer le mat√©riel informatique', 'RG': 'RG-MAT-001: Inventaire complet avec codes uniques', 'US': 'US-MAT-001: Ajouter/modifier/supprimer du mat√©riel', 'D√©pendance': '-', 'Statut': 'Termin√©', 'Commentaire': 'Codes d\'inventaire automatiques', 'Feature Link': '/materiel_informatique/', 'US Link': '/materiel_informatique/'},
        {'Prio': 'P2', 'EPIC': 'Chatbot', 'Feature': 'Assistant IA', 'Persona': 'Employ√©', 'Macro US': 'En tant qu\'utilisateur, je veux poser des questions', 'RG': 'RG-CHAT-001: R√©ponses bas√©es sur la base de connaissances', 'US': 'US-CHAT-001: Interroger l\'assistant IA', 'D√©pendance': '-', 'Statut': 'Termin√©', 'Commentaire': 'RAG avec base de connaissances', 'Feature Link': '/chatbot/', 'US Link': '/chatbot/'},
        {'Prio': 'P3', 'EPIC': 'API', 'Feature': 'API REST', 'Persona': 'Super Admin', 'Macro US': 'En tant qu\'admin, je veux une API', 'RG': 'RG-API-001: Documentation OpenAPI', 'US': 'US-API-001: Exposer les donn√©es via API', 'D√©pendance': '-', 'Statut': '√Ä faire', 'Commentaire': 'API RESTful compl√®te', 'Feature Link': '/api/', 'US Link': '/api/'}
    ]
    
    df = pd.DataFrame(backlog_data)
    
    # Cr√©ation du workbook
    wb = Workbook()
    ws = wb.active
    ws.title = "Backlog Produit"
    
    # Application des styles
    apply_styles_to_worksheet(ws)
    
    # Ajout des donn√©es
    for r in dataframe_to_rows(df, index=False, header=False):
        ws.append(r)
    
    # Application des couleurs
    apply_priority_colors(ws, start_row=5)
    
    # Cr√©ation des autres feuilles
    create_personas_sheet(wb)
    create_epics_sheet(wb)
    
    # Suppression de la feuille par d√©faut si elle existe
    if 'Sheet' in wb.sheetnames:
        wb.remove(wb['Sheet'])
    
    # Sauvegarde
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"Backlog_Produit_ParcInfo_Styled_{timestamp}.xlsx"
    wb.save(filename)
    
    print(f"‚úÖ Backlog produit styl√© g√©n√©r√© : {filename}")
    print(f"üìä {len(df)} fonctionnalit√©s avec style professionnel")
    print(f"üé® Couleurs par priorit√© et statut appliqu√©es")
    
    return filename

if __name__ == "__main__":
    generate_styled_backlog()
