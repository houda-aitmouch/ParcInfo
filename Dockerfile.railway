# Dockerfile Railway - Application complète (Backend + Frontend + Chatbot)
FROM python:3.11-slim

# Variables d'environnement
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive
ENV PORT=8000

# Installation des dépendances système
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    gettext \
    curl \
    nginx \
    nodejs \
    npm \
    && rm -rf /var/lib/apt/lists/*

# Répertoire de travail
WORKDIR /app

# Copie des requirements
COPY requirements.txt /app/

# Installation des dépendances Python
RUN pip install --no-cache-dir -r requirements.txt

# Installation des dépendances spécifiques au chatbot
RUN pip install --no-cache-dir \
    sentence-transformers \
    transformers \
    torch \
    numpy \
    scikit-learn

# Installation des dépendances frontend
COPY frontend/package.json frontend/package-lock.json /app/frontend/
WORKDIR /app/frontend
RUN npm ci --only=production

# Copie du code source
COPY . /app/
WORKDIR /app

# Build du frontend
WORKDIR /app/frontend
RUN npm run build
WORKDIR /app

# Création des répertoires nécessaires
RUN mkdir -p /app/staticfiles /app/media /root/.cache/huggingface/hub

# Copie des fichiers statiques frontend
RUN cp -r /app/frontend/dist/* /app/staticfiles/ || true

# Collecte des fichiers statiques Django
RUN python manage.py collectstatic --noinput --settings=ParcInfo.settings

# Configuration nginx pour Railway
RUN echo 'server { \
    listen $PORT; \
    server_name _; \
    client_max_body_size 100M; \
    location /static/ { \
        alias /app/staticfiles/; \
        expires 1y; \
        add_header Cache-Control "public, immutable"; \
    } \
    location /media/ { \
        alias /app/media/; \
        expires 1y; \
        add_header Cache-Control "public, immutable"; \
    } \
    location / { \
        proxy_pass http://127.0.0.1:8001; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
        proxy_redirect off; \
    } \
    location /health/ { \
        access_log off; \
        return 200 "healthy\n"; \
        add_header Content-Type text/plain; \
    } \
}' > /etc/nginx/sites-available/default

# Script de démarrage Railway
RUN echo '#!/bin/bash \
echo "🚀 Démarrage de ParcInfo sur Railway..." \
echo "⏳ Attente de la base de données..." \
while ! python -c "import socket; socket.create_connection((\"$DATABASE_HOST\", $DATABASE_PORT))" 2>/dev/null; do \
    sleep 1 \
done \
echo "✅ Base de données connectée" \
echo "🔄 Exécution des migrations..." \
python manage.py migrate --settings=ParcInfo.settings \
echo "📁 Collecte des fichiers statiques..." \
python manage.py collectstatic --noinput --settings=ParcInfo.settings \
echo "👤 Vérification du superutilisateur..." \
python manage.py shell --settings=ParcInfo.settings << EOF \
from django.contrib.auth import get_user_model \
User = get_user_model() \
if not User.objects.filter(username=\"admin\").exists(): \
    User.objects.create_superuser(\"admin\", \"admin@parcinfo.com\", \"admin123\") \
    print(\"Superutilisateur admin créé\") \
else: \
    print(\"Superutilisateur admin existe déjà\") \
EOF \
echo "🌐 Démarrage de Nginx..." \
nginx -g "daemon off;" & \
echo "🐍 Démarrage de Django..." \
python manage.py runserver 0.0.0.0:8001 --settings=ParcInfo.settings \
echo "✅ ParcInfo démarré avec succès sur Railway!" \
' > /app/railway-start.sh && chmod +x /app/railway-start.sh

# Exposition du port
EXPOSE $PORT

# Commande de démarrage
CMD ["/app/railway-start.sh"]
